{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../server/server.component\";\n\nfunction ServersComponent_p_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Server was created, server name is \", ctx_r0.serverName, \"\");\n  }\n}\n\nfunction ServersComponent_p_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"No server was created!\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ServersComponent_app_server_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-server\");\n  }\n}\n\nexport class ServersComponent {\n  constructor() {\n    this.allowNewServer = false;\n    this.serverName = '';\n    this.serverCreationStatus = 'No server was created!';\n    this.countClick = 0;\n    this.serverCreated = false;\n    this.servers = ['Test Server', 'Test Server2'];\n    setTimeout(() => {\n      this.allowNewServer = true;\n    }, 2000);\n  }\n\n  ngOnInit() {}\n\n  onCreateServer() {\n    this.serverCreated = true;\n    this.servers.push(this.serverName);\n    this.serverCreationStatus = 'Server was created! Name is ' + this.serverName;\n    this.countClick++;\n  }\n\n  onUpdateServerName(event) {\n    this.serverName = event.target.value;\n  }\n\n  static #_ = this.ɵfac = function ServersComponent_Factory(t) {\n    return new (t || ServersComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ServersComponent,\n    selectors: [[\"app-servers\"]],\n    decls: 9,\n    vars: 5,\n    consts: [[\"type\", \"text\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [4, \"ngIf\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\", \"click\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function ServersComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"label\");\n        i0.ɵɵtext(1, \"Server Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"input\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function ServersComponent_Template_input_ngModelChange_2_listener($event) {\n          return ctx.serverName = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, ServersComponent_p_3_Template, 2, 1, \"p\", 1);\n        i0.ɵɵtemplate(4, ServersComponent_p_4_Template, 2, 0, \"p\", 1);\n        i0.ɵɵelementStart(5, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function ServersComponent_Template_button_click_5_listener() {\n          return ctx.onCreateServer();\n        });\n        i0.ɵɵtext(6, \" Add Server\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"hr\");\n        i0.ɵɵtemplate(8, ServersComponent_app_server_8_Template, 1, 0, \"app-server\", 3);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.serverName);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.serverCreated);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.serverCreated);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", !ctx.allowNewServer);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.servers);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i3.ServerComponent],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"sources":["D:\\www\\Cursos\\courses-angular\\Udemy\\Angular-TheCompleteGuide\\my-first-app\\src\\app\\servers\\servers.component.ts","D:\\www\\Cursos\\courses-angular\\Udemy\\Angular-TheCompleteGuide\\my-first-app\\src\\app\\servers\\servers.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-servers',\r\n  templateUrl: './servers.component.html',\r\n  styleUrls: ['./servers.component.css'],\r\n})\r\nexport class ServersComponent implements OnInit {\r\n  constructor() {\r\n    setTimeout(() => {\r\n      this.allowNewServer = true;\r\n    }, 2000);\r\n  }\r\n\r\n  allowNewServer = false;\r\n  serverName = '';\r\n  serverCreationStatus = 'No server was created!';\r\n  countClick = 0;\r\n  serverCreated = false;\r\n  servers = ['Test Server', 'Test Server2'];\r\n\r\n  ngOnInit(): void {}\r\n\r\n  onCreateServer(): void {\r\n    this.serverCreated = true;\r\n    this.servers.push(this.serverName);\r\n    this.serverCreationStatus =\r\n      'Server was created! Name is ' + this.serverName;\r\n    this.countClick++;\r\n  }\r\n\r\n  onUpdateServerName(event: Event): void {\r\n    this.serverName = (event.target as HTMLInputElement).value;\r\n  }\r\n}\r\n","<label>Server Name</label>\r\n<!-- <input type=\"text\" class=\"form-control\" (input)=\"onUpdateServerName($event)\" /> -->\r\n<input type=\"text\" class=\"form-control\" [(ngModel)]=\"serverName\" />\r\n\r\n<p *ngIf=\"serverCreated\">Server was created, server name is {{ serverName }}</p>\r\n<p *ngIf=\"!serverCreated\">No server was created!</p>\r\n\r\n<button\r\n  class=\"btn btn-primary\"\r\n  [disabled]=\"!allowNewServer\"\r\n  (click)=\"onCreateServer()\"\r\n>\r\n  Add Server\r\n</button>\r\n\r\n<hr />\r\n\r\n<!-- <p>{{ serverName }}</p> -->\r\n<!-- <p>{{ serverCreationStatus }} - {{ countClick }}</p> -->\r\n\r\n<app-server *ngFor=\"let server of servers\"></app-server>\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module","externalDependencies":[]}