{"ast":null,"code":"/**\n * @license Angular v15.2.10\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { ɵDomAdapter, ɵsetRootDomAdapter, ɵparseCookieValue, ɵgetDOM, DOCUMENT, ɵPLATFORM_BROWSER_ID, XhrFactory, CommonModule } from '@angular/common';\nexport { ɵgetDOM } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, ApplicationInitStatus, APP_INITIALIZER, Injector, ɵglobal, Injectable, Inject, ViewEncapsulation, APP_ID, RendererStyleFlags2, ɵinternalCreateApplication, ErrorHandler, ɵsetDocument, PLATFORM_ID, PLATFORM_INITIALIZER, createPlatformFactory, platformCore, ɵTESTABILITY_GETTER, ɵTESTABILITY, Testability, NgZone, TestabilityRegistry, ɵINJECTOR_SCOPE, RendererFactory2, ApplicationModule, NgModule, Optional, SkipSelf, ɵɵinject, ApplicationRef, inject, ɵConsole, forwardRef, ɵXSS_SECURITY_URL, SecurityContext, ɵallowSanitizationBypassAndThrow, ɵunwrapSafeValue, ɵ_sanitizeUrl, ɵ_sanitizeHtml, ɵbypassSanitizationTrustHtml, ɵbypassSanitizationTrustStyle, ɵbypassSanitizationTrustScript, ɵbypassSanitizationTrustUrl, ɵbypassSanitizationTrustResourceUrl, Version } from '@angular/core';\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n\nclass GenericBrowserDomAdapter extends ɵDomAdapter {\n  constructor() {\n    super(...arguments);\n    this.supportsDOMEvents = true;\n  }\n\n}\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n\n/* tslint:disable:requireParameterType no-console */\n\n\nclass BrowserDomAdapter extends GenericBrowserDomAdapter {\n  static makeCurrent() {\n    ɵsetRootDomAdapter(new BrowserDomAdapter());\n  }\n\n  onAndCancel(el, evt, listener) {\n    el.addEventListener(evt, listener, false); // Needed to follow Dart's subscription semantic, until fix of\n    // https://code.google.com/p/dart/issues/detail?id=17406\n\n    return () => {\n      el.removeEventListener(evt, listener, false);\n    };\n  }\n\n  dispatchEvent(el, evt) {\n    el.dispatchEvent(evt);\n  }\n\n  remove(node) {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  }\n\n  createElement(tagName, doc) {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElement(tagName);\n  }\n\n  createHtmlDocument() {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n\n  getDefaultDocument() {\n    return document;\n  }\n\n  isElementNode(node) {\n    return node.nodeType === Node.ELEMENT_NODE;\n  }\n\n  isShadowRoot(node) {\n    return node instanceof DocumentFragment;\n  }\n  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */\n\n\n  getGlobalEventTarget(doc, target) {\n    if (target === 'window') {\n      return window;\n    }\n\n    if (target === 'document') {\n      return doc;\n    }\n\n    if (target === 'body') {\n      return doc.body;\n    }\n\n    return null;\n  }\n\n  getBaseHref(doc) {\n    const href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n\n  resetBaseElement() {\n    baseElement = null;\n  }\n\n  getUserAgent() {\n    return window.navigator.userAgent;\n  }\n\n  getCookie(name) {\n    return ɵparseCookieValue(document.cookie, name);\n  }\n\n}\n\nlet baseElement = null;\n\nfunction getBaseElementHref() {\n  baseElement = baseElement || document.querySelector('base');\n  return baseElement ? baseElement.getAttribute('href') : null;\n} // based on urlUtils.js in AngularJS 1\n\n\nlet urlParsingNode;\n\nfunction relativePath(url) {\n  urlParsingNode = urlParsingNode || document.createElement('a');\n  urlParsingNode.setAttribute('href', url);\n  const pathName = urlParsingNode.pathname;\n  return pathName.charAt(0) === '/' ? pathName : `/${pathName}`;\n}\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\n\n\nconst TRANSITION_ID = new InjectionToken('TRANSITION_ID');\n\nfunction appInitializerFactory(transitionId, document, injector) {\n  return () => {\n    // Wait for all application initializers to be completed before removing the styles set by\n    // the server.\n    injector.get(ApplicationInitStatus).donePromise.then(() => {\n      const dom = ɵgetDOM();\n      const styles = document.querySelectorAll(`style[ng-transition=\"${transitionId}\"]`);\n\n      for (let i = 0; i < styles.length; i++) {\n        dom.remove(styles[i]);\n      }\n    });\n  };\n}\n\nconst SERVER_TRANSITION_PROVIDERS = [{\n  provide: APP_INITIALIZER,\n  useFactory: appInitializerFactory,\n  deps: [TRANSITION_ID, DOCUMENT, Injector],\n  multi: true\n}];\n\nclass BrowserGetTestability {\n  addToWindow(registry) {\n    ɵglobal['getAngularTestability'] = (elem, findInAncestors = true) => {\n      const testability = registry.findTestabilityInTree(elem, findInAncestors);\n\n      if (testability == null) {\n        throw new Error('Could not find testability for element.');\n      }\n\n      return testability;\n    };\n\n    ɵglobal['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    ɵglobal['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const whenAllStable = (callback\n    /** TODO #9100 */\n    ) => {\n      const testabilities = ɵglobal['getAllAngularTestabilities']();\n      let count = testabilities.length;\n      let didWork = false;\n\n      const decrement = function (didWork_\n      /** TODO #9100 */\n      ) {\n        didWork = didWork || didWork_;\n        count--;\n\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n\n      testabilities.forEach(function (testability\n      /** TODO #9100 */\n      ) {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!ɵglobal['frameworkStabilizers']) {\n      ɵglobal['frameworkStabilizers'] = [];\n    }\n\n    ɵglobal['frameworkStabilizers'].push(whenAllStable);\n  }\n\n  findTestabilityInTree(registry, elem, findInAncestors) {\n    if (elem == null) {\n      return null;\n    }\n\n    const t = registry.getTestability(elem);\n\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n\n    if (ɵgetDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, elem.host, true);\n    }\n\n    return this.findTestabilityInTree(registry, elem.parentElement, true);\n  }\n\n}\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n */\n\n\nclass BrowserXhr {\n  build() {\n    return new XMLHttpRequest();\n  }\n\n}\n\nBrowserXhr.ɵfac = function BrowserXhr_Factory(t) {\n  return new (t || BrowserXhr)();\n};\n\nBrowserXhr.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: BrowserXhr,\n  factory: BrowserXhr.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BrowserXhr, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * The injection token for the event-manager plug-in service.\n *\n * @publicApi\n */\n\n\nconst EVENT_MANAGER_PLUGINS = new InjectionToken('EventManagerPlugins');\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\n\nclass EventManager {\n  /**\n   * Initializes an instance of the event-manager service.\n   */\n  constructor(plugins, _zone) {\n    this._zone = _zone;\n    this._eventNameToPlugin = new Map();\n    plugins.forEach(plugin => {\n      plugin.manager = this;\n    });\n    this._plugins = plugins.slice().reverse();\n  }\n  /**\n   * Registers a handler for a specific element and event.\n   *\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns  A callback function that can be used to remove the handler.\n   */\n\n\n  addEventListener(element, eventName, handler) {\n    const plugin = this._findPluginFor(eventName);\n\n    return plugin.addEventListener(element, eventName, handler);\n  }\n  /**\n   * Registers a global handler for an event in a target view.\n   *\n   * @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns A callback function that can be used to remove the handler.\n   * @deprecated No longer being used in Ivy code. To be removed in version 14.\n   */\n\n\n  addGlobalEventListener(target, eventName, handler) {\n    const plugin = this._findPluginFor(eventName);\n\n    return plugin.addGlobalEventListener(target, eventName, handler);\n  }\n  /**\n   * Retrieves the compilation zone in which event listeners are registered.\n   */\n\n\n  getZone() {\n    return this._zone;\n  }\n  /** @internal */\n\n\n  _findPluginFor(eventName) {\n    const plugin = this._eventNameToPlugin.get(eventName);\n\n    if (plugin) {\n      return plugin;\n    }\n\n    const plugins = this._plugins;\n\n    for (let i = 0; i < plugins.length; i++) {\n      const plugin = plugins[i];\n\n      if (plugin.supports(eventName)) {\n        this._eventNameToPlugin.set(eventName, plugin);\n\n        return plugin;\n      }\n    }\n\n    throw new Error(`No event manager plugin found for event ${eventName}`);\n  }\n\n}\n\nEventManager.ɵfac = function EventManager_Factory(t) {\n  return new (t || EventManager)(i0.ɵɵinject(EVENT_MANAGER_PLUGINS), i0.ɵɵinject(i0.NgZone));\n};\n\nEventManager.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: EventManager,\n  factory: EventManager.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EventManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [EVENT_MANAGER_PLUGINS]\n      }]\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\nclass EventManagerPlugin {\n  constructor(_doc) {\n    this._doc = _doc;\n  }\n\n  addGlobalEventListener(element, eventName, handler) {\n    const target = ɵgetDOM().getGlobalEventTarget(this._doc, element);\n\n    if (!target) {\n      throw new Error(`Unsupported event target ${target} for event ${eventName}`);\n    }\n\n    return this.addEventListener(target, eventName, handler);\n  }\n\n}\n\nclass SharedStylesHost {\n  constructor() {\n    this.usageCount = new Map();\n  }\n\n  addStyles(styles) {\n    for (const style of styles) {\n      const usageCount = this.changeUsageCount(style, 1);\n\n      if (usageCount === 1) {\n        this.onStyleAdded(style);\n      }\n    }\n  }\n\n  removeStyles(styles) {\n    for (const style of styles) {\n      const usageCount = this.changeUsageCount(style, -1);\n\n      if (usageCount === 0) {\n        this.onStyleRemoved(style);\n      }\n    }\n  }\n\n  onStyleRemoved(style) {}\n\n  onStyleAdded(style) {}\n\n  getAllStyles() {\n    return this.usageCount.keys();\n  }\n\n  changeUsageCount(style, delta) {\n    const map = this.usageCount;\n    let usage = map.get(style) ?? 0;\n    usage += delta;\n\n    if (usage > 0) {\n      map.set(style, usage);\n    } else {\n      map.delete(style);\n    }\n\n    return usage;\n  }\n\n  ngOnDestroy() {\n    for (const style of this.getAllStyles()) {\n      this.onStyleRemoved(style);\n    }\n\n    this.usageCount.clear();\n  }\n\n}\n\nSharedStylesHost.ɵfac = function SharedStylesHost_Factory(t) {\n  return new (t || SharedStylesHost)();\n};\n\nSharedStylesHost.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SharedStylesHost,\n  factory: SharedStylesHost.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SharedStylesHost, [{\n    type: Injectable\n  }], null, null);\n})();\n\nclass DomSharedStylesHost extends SharedStylesHost {\n  constructor(doc) {\n    super();\n    this.doc = doc; // Maps all registered host nodes to a list of style nodes that have been added to the host node.\n\n    this.styleRef = new Map();\n    this.hostNodes = new Set();\n    this.resetHostNodes();\n  }\n\n  onStyleAdded(style) {\n    for (const host of this.hostNodes) {\n      this.addStyleToHost(host, style);\n    }\n  }\n\n  onStyleRemoved(style) {\n    const styleRef = this.styleRef;\n    const styleElements = styleRef.get(style);\n    styleElements?.forEach(e => e.remove());\n    styleRef.delete(style);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this.styleRef.clear();\n    this.resetHostNodes();\n  }\n\n  addHost(hostNode) {\n    this.hostNodes.add(hostNode);\n\n    for (const style of this.getAllStyles()) {\n      this.addStyleToHost(hostNode, style);\n    }\n  }\n\n  removeHost(hostNode) {\n    this.hostNodes.delete(hostNode);\n  }\n\n  addStyleToHost(host, style) {\n    const styleEl = this.doc.createElement('style');\n    styleEl.textContent = style;\n    host.appendChild(styleEl);\n    const styleElRef = this.styleRef.get(style);\n\n    if (styleElRef) {\n      styleElRef.push(styleEl);\n    } else {\n      this.styleRef.set(style, [styleEl]);\n    }\n  }\n\n  resetHostNodes() {\n    const hostNodes = this.hostNodes;\n    hostNodes.clear(); // Re-add the head element back since this is the default host.\n\n    hostNodes.add(this.doc.head);\n  }\n\n}\n\nDomSharedStylesHost.ɵfac = function DomSharedStylesHost_Factory(t) {\n  return new (t || DomSharedStylesHost)(i0.ɵɵinject(DOCUMENT));\n};\n\nDomSharedStylesHost.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DomSharedStylesHost,\n  factory: DomSharedStylesHost.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DomSharedStylesHost, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\nconst NAMESPACE_URIS = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n  'math': 'http://www.w3.org/1998/MathML/'\n};\nconst COMPONENT_REGEX = /%COMP%/g;\nconst NG_DEV_MODE$1 = typeof ngDevMode === 'undefined' || !!ngDevMode;\nconst COMPONENT_VARIABLE = '%COMP%';\nconst HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nconst CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n/**\n * The default value for the `REMOVE_STYLES_ON_COMPONENT_DESTROY` DI token.\n */\n\nconst REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT = false;\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates whether styles\n * of destroyed components should be removed from DOM.\n *\n * By default, the value is set to `false`. This will be changed in the next major version.\n * @publicApi\n */\n\nconst REMOVE_STYLES_ON_COMPONENT_DESTROY = new InjectionToken('RemoveStylesOnCompDestory', {\n  providedIn: 'root',\n  factory: () => REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT\n});\n\nfunction shimContentAttribute(componentShortId) {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nfunction shimHostAttribute(componentShortId) {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nfunction flattenStyles(compId, styles) {\n  // Cannot use `Infinity` as depth as `infinity` is not a number literal in TypeScript.\n  // See: https://github.com/microsoft/TypeScript/issues/32277\n  return styles.flat(100).map(s => s.replace(COMPONENT_REGEX, compId));\n}\n\nfunction decoratePreventDefault(eventHandler) {\n  // `DebugNode.triggerEventHandler` needs to know if the listener was created with\n  // decoratePreventDefault or is a listener added outside the Angular context so it can handle the\n  // two differently. In the first case, the special '__ngUnwrap__' token is passed to the unwrap\n  // the listener (see below).\n  return event => {\n    // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function\n    // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The debug_node\n    // can inspect the listener toString contents for the existence of this special token. Because\n    // the token is a string literal, it is ensured to not be modified by compiled code.\n    if (event === '__ngUnwrap__') {\n      return eventHandler;\n    }\n\n    const allowDefaultBehavior = eventHandler(event);\n\n    if (allowDefaultBehavior === false) {\n      // TODO(tbosch): move preventDefault into event plugins...\n      event.preventDefault();\n      event.returnValue = false;\n    }\n\n    return undefined;\n  };\n}\n\nclass DomRendererFactory2 {\n  constructor(eventManager, sharedStylesHost, appId, removeStylesOnCompDestory) {\n    this.eventManager = eventManager;\n    this.sharedStylesHost = sharedStylesHost;\n    this.appId = appId;\n    this.removeStylesOnCompDestory = removeStylesOnCompDestory;\n    this.rendererByCompId = new Map();\n    this.defaultRenderer = new DefaultDomRenderer2(eventManager);\n  }\n\n  createRenderer(element, type) {\n    if (!element || !type) {\n      return this.defaultRenderer;\n    }\n\n    const renderer = this.getOrCreateRenderer(element, type); // Renderers have different logic due to different encapsulation behaviours.\n    // Ex: for emulated, an attribute is added to the element.\n\n    if (renderer instanceof EmulatedEncapsulationDomRenderer2) {\n      renderer.applyToHost(element);\n    } else if (renderer instanceof NoneEncapsulationDomRenderer) {\n      renderer.applyStyles();\n    }\n\n    return renderer;\n  }\n\n  getOrCreateRenderer(element, type) {\n    const rendererByCompId = this.rendererByCompId;\n    let renderer = rendererByCompId.get(type.id);\n\n    if (!renderer) {\n      const eventManager = this.eventManager;\n      const sharedStylesHost = this.sharedStylesHost;\n      const removeStylesOnCompDestory = this.removeStylesOnCompDestory;\n\n      switch (type.encapsulation) {\n        case ViewEncapsulation.Emulated:\n          renderer = new EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, type, this.appId, removeStylesOnCompDestory);\n          break;\n\n        case ViewEncapsulation.ShadowDom:\n          return new ShadowDomRenderer(eventManager, sharedStylesHost, element, type);\n\n        default:\n          renderer = new NoneEncapsulationDomRenderer(eventManager, sharedStylesHost, type, removeStylesOnCompDestory);\n          break;\n      }\n\n      renderer.onDestroy = () => rendererByCompId.delete(type.id);\n\n      rendererByCompId.set(type.id, renderer);\n    }\n\n    return renderer;\n  }\n\n  ngOnDestroy() {\n    this.rendererByCompId.clear();\n  }\n\n  begin() {}\n\n  end() {}\n\n}\n\nDomRendererFactory2.ɵfac = function DomRendererFactory2_Factory(t) {\n  return new (t || DomRendererFactory2)(i0.ɵɵinject(EventManager), i0.ɵɵinject(DomSharedStylesHost), i0.ɵɵinject(APP_ID), i0.ɵɵinject(REMOVE_STYLES_ON_COMPONENT_DESTROY));\n};\n\nDomRendererFactory2.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DomRendererFactory2,\n  factory: DomRendererFactory2.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DomRendererFactory2, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: EventManager\n    }, {\n      type: DomSharedStylesHost\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [APP_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [REMOVE_STYLES_ON_COMPONENT_DESTROY]\n      }]\n    }];\n  }, null);\n})();\n\nclass DefaultDomRenderer2 {\n  constructor(eventManager) {\n    this.eventManager = eventManager;\n    this.data = Object.create(null);\n    this.destroyNode = null;\n  }\n\n  destroy() {}\n\n  createElement(name, namespace) {\n    if (namespace) {\n      // TODO: `|| namespace` was added in\n      // https://github.com/angular/angular/commit/2b9cc8503d48173492c29f5a271b61126104fbdb to\n      // support how Ivy passed around the namespace URI rather than short name at the time. It did\n      // not, however extend the support to other parts of the system (setAttribute, setAttribute,\n      // and the ServerRenderer). We should decide what exactly the semantics for dealing with\n      // namespaces should be and make it consistent.\n      // Related issues:\n      // https://github.com/angular/angular/issues/44028\n      // https://github.com/angular/angular/issues/44883\n      return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n    }\n\n    return document.createElement(name);\n  }\n\n  createComment(value) {\n    return document.createComment(value);\n  }\n\n  createText(value) {\n    return document.createTextNode(value);\n  }\n\n  appendChild(parent, newChild) {\n    const targetParent = isTemplateNode(parent) ? parent.content : parent;\n    targetParent.appendChild(newChild);\n  }\n\n  insertBefore(parent, newChild, refChild) {\n    if (parent) {\n      const targetParent = isTemplateNode(parent) ? parent.content : parent;\n      targetParent.insertBefore(newChild, refChild);\n    }\n  }\n\n  removeChild(parent, oldChild) {\n    if (parent) {\n      parent.removeChild(oldChild);\n    }\n  }\n\n  selectRootElement(selectorOrNode, preserveContent) {\n    let el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) : selectorOrNode;\n\n    if (!el) {\n      throw new Error(`The selector \"${selectorOrNode}\" did not match any elements`);\n    }\n\n    if (!preserveContent) {\n      el.textContent = '';\n    }\n\n    return el;\n  }\n\n  parentNode(node) {\n    return node.parentNode;\n  }\n\n  nextSibling(node) {\n    return node.nextSibling;\n  }\n\n  setAttribute(el, name, value, namespace) {\n    if (namespace) {\n      name = namespace + ':' + name;\n      const namespaceUri = NAMESPACE_URIS[namespace];\n\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n\n  removeAttribute(el, name, namespace) {\n    if (namespace) {\n      const namespaceUri = NAMESPACE_URIS[namespace];\n\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n\n  addClass(el, name) {\n    el.classList.add(name);\n  }\n\n  removeClass(el, name) {\n    el.classList.remove(name);\n  }\n\n  setStyle(el, style, value, flags) {\n    if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {\n      el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n\n  removeStyle(el, style, flags) {\n    if (flags & RendererStyleFlags2.DashCase) {\n      // removeProperty has no effect when used on camelCased properties.\n      el.style.removeProperty(style);\n    } else {\n      el.style[style] = '';\n    }\n  }\n\n  setProperty(el, name, value) {\n    NG_DEV_MODE$1 && checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n\n  setValue(node, value) {\n    node.nodeValue = value;\n  }\n\n  listen(target, event, callback) {\n    NG_DEV_MODE$1 && checkNoSyntheticProp(event, 'listener');\n\n    if (typeof target === 'string') {\n      return this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback));\n    }\n\n    return this.eventManager.addEventListener(target, event, decoratePreventDefault(callback));\n  }\n\n}\n\nconst AT_CHARCODE = (() => '@'.charCodeAt(0))();\n\nfunction checkNoSyntheticProp(name, nameKind) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new Error(`Unexpected synthetic ${nameKind} ${name} found. Please make sure that:\n  - Either \\`BrowserAnimationsModule\\` or \\`NoopAnimationsModule\\` are imported in your application.\n  - There is corresponding configuration for the animation named \\`${name}\\` defined in the \\`animations\\` field of the \\`@Component\\` decorator (see https://angular.io/api/core/Component#animations).`);\n  }\n}\n\nfunction isTemplateNode(node) {\n  return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\n\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n  constructor(eventManager, sharedStylesHost, hostEl, component) {\n    super(eventManager);\n    this.sharedStylesHost = sharedStylesHost;\n    this.hostEl = hostEl;\n    this.shadowRoot = hostEl.attachShadow({\n      mode: 'open'\n    });\n    this.sharedStylesHost.addHost(this.shadowRoot);\n    const styles = flattenStyles(component.id, component.styles);\n\n    for (const style of styles) {\n      const styleEl = document.createElement('style');\n      styleEl.textContent = style;\n      this.shadowRoot.appendChild(styleEl);\n    }\n  }\n\n  nodeOrShadowRoot(node) {\n    return node === this.hostEl ? this.shadowRoot : node;\n  }\n\n  appendChild(parent, newChild) {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n\n  insertBefore(parent, newChild, refChild) {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n\n  removeChild(parent, oldChild) {\n    return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n  }\n\n  parentNode(node) {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n\n  destroy() {\n    this.sharedStylesHost.removeHost(this.shadowRoot);\n  }\n\n}\n\nclass NoneEncapsulationDomRenderer extends DefaultDomRenderer2 {\n  constructor(eventManager, sharedStylesHost, component, removeStylesOnCompDestory, compId = component.id) {\n    super(eventManager);\n    this.sharedStylesHost = sharedStylesHost;\n    this.removeStylesOnCompDestory = removeStylesOnCompDestory;\n    this.rendererUsageCount = 0;\n    this.styles = flattenStyles(compId, component.styles);\n  }\n\n  applyStyles() {\n    this.sharedStylesHost.addStyles(this.styles);\n    this.rendererUsageCount++;\n  }\n\n  destroy() {\n    if (!this.removeStylesOnCompDestory) {\n      return;\n    }\n\n    this.sharedStylesHost.removeStyles(this.styles);\n    this.rendererUsageCount--;\n\n    if (this.rendererUsageCount === 0) {\n      this.onDestroy?.();\n    }\n  }\n\n}\n\nclass EmulatedEncapsulationDomRenderer2 extends NoneEncapsulationDomRenderer {\n  constructor(eventManager, sharedStylesHost, component, appId, removeStylesOnCompDestory) {\n    const compId = appId + '-' + component.id;\n    super(eventManager, sharedStylesHost, component, removeStylesOnCompDestory, compId);\n    this.contentAttr = shimContentAttribute(compId);\n    this.hostAttr = shimHostAttribute(compId);\n  }\n\n  applyToHost(element) {\n    this.applyStyles();\n    this.setAttribute(element, this.hostAttr, '');\n  }\n\n  createElement(parent, name) {\n    const el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n\n}\n\nclass DomEventsPlugin extends EventManagerPlugin {\n  constructor(doc) {\n    super(doc);\n  } // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n\n\n  supports(eventName) {\n    return true;\n  }\n\n  addEventListener(element, eventName, handler) {\n    element.addEventListener(eventName, handler, false);\n    return () => this.removeEventListener(element, eventName, handler);\n  }\n\n  removeEventListener(target, eventName, callback) {\n    return target.removeEventListener(eventName, callback);\n  }\n\n}\n\nDomEventsPlugin.ɵfac = function DomEventsPlugin_Factory(t) {\n  return new (t || DomEventsPlugin)(i0.ɵɵinject(DOCUMENT));\n};\n\nDomEventsPlugin.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DomEventsPlugin,\n  factory: DomEventsPlugin.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DomEventsPlugin, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Defines supported modifiers for key events.\n */\n\n\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift']; // The following values are here for cross-browser compatibility and to match the W3C standard\n// cf https://www.w3.org/TR/DOM-Level-3-Events-key/\n\nconst _keyMap = {\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS'\n};\n/**\n * Retrieves modifiers from key-event objects.\n */\n\nconst MODIFIER_KEY_GETTERS = {\n  'alt': event => event.altKey,\n  'control': event => event.ctrlKey,\n  'meta': event => event.metaKey,\n  'shift': event => event.shiftKey\n};\n/**\n * @publicApi\n * A browser plug-in that provides support for handling of key events in Angular.\n */\n\nclass KeyEventsPlugin extends EventManagerPlugin {\n  /**\n   * Initializes an instance of the browser plug-in.\n   * @param doc The document in which key events will be detected.\n   */\n  constructor(doc) {\n    super(doc);\n  }\n  /**\n   * Reports whether a named key event is supported.\n   * @param eventName The event name to query.\n   * @return True if the named key event is supported.\n   */\n\n\n  supports(eventName) {\n    return KeyEventsPlugin.parseEventName(eventName) != null;\n  }\n  /**\n   * Registers a handler for a specific element and key event.\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the key event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns The key event that was registered.\n   */\n\n\n  addEventListener(element, eventName, handler) {\n    const parsedEvent = KeyEventsPlugin.parseEventName(eventName);\n    const outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n    return this.manager.getZone().runOutsideAngular(() => {\n      return ɵgetDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n    });\n  }\n  /**\n   * Parses the user provided full keyboard event definition and normalizes it for\n   * later internal use. It ensures the string is all lowercase, converts special\n   * characters to a standard spelling, and orders all the values consistently.\n   *\n   * @param eventName The name of the key event to listen for.\n   * @returns an object with the full, normalized string, and the dom event name\n   * or null in the case when the event doesn't match a keyboard event.\n   */\n\n\n  static parseEventName(eventName) {\n    const parts = eventName.toLowerCase().split('.');\n    const domEventName = parts.shift();\n\n    if (parts.length === 0 || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const key = KeyEventsPlugin._normalizeKey(parts.pop());\n\n    let fullKey = '';\n    let codeIX = parts.indexOf('code');\n\n    if (codeIX > -1) {\n      parts.splice(codeIX, 1);\n      fullKey = 'code.';\n    }\n\n    MODIFIER_KEYS.forEach(modifierName => {\n      const index = parts.indexOf(modifierName);\n\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    } // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.\n    //       The code must remain in the `result['domEventName']` form.\n    // return {domEventName, fullKey};\n\n\n    const result = {};\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n  /**\n   * Determines whether the actual keys pressed match the configured key code string.\n   * The `fullKeyCode` event is normalized in the `parseEventName` method when the\n   * event is attached to the DOM during the `addEventListener` call. This is unseen\n   * by the end user and is normalized for internal consistency and parsing.\n   *\n   * @param event The keyboard event.\n   * @param fullKeyCode The normalized user defined expected key event string\n   * @returns boolean.\n   */\n\n\n  static matchEventFullKeyCode(event, fullKeyCode) {\n    let keycode = _keyMap[event.key] || event.key;\n    let key = '';\n\n    if (fullKeyCode.indexOf('code.') > -1) {\n      keycode = event.code;\n      key = 'code.';\n    } // the keycode could be unidentified so we have to check here\n\n\n    if (keycode == null || !keycode) return false;\n    keycode = keycode.toLowerCase();\n\n    if (keycode === ' ') {\n      keycode = 'space'; // for readability\n    } else if (keycode === '.') {\n      keycode = 'dot'; // because '.' is used as a separator in event names\n    }\n\n    MODIFIER_KEYS.forEach(modifierName => {\n      if (modifierName !== keycode) {\n        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n\n        if (modifierGetter(event)) {\n          key += modifierName + '.';\n        }\n      }\n    });\n    key += keycode;\n    return key === fullKeyCode;\n  }\n  /**\n   * Configures a handler callback for a key event.\n   * @param fullKey The event name that combines all simultaneous keystrokes.\n   * @param handler The function that responds to the key event.\n   * @param zone The zone in which the event occurred.\n   * @returns A callback function.\n   */\n\n\n  static eventCallback(fullKey, handler, zone) {\n    return event => {\n      if (KeyEventsPlugin.matchEventFullKeyCode(event, fullKey)) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n  /** @internal */\n\n\n  static _normalizeKey(keyName) {\n    // TODO: switch to a Map if the mapping grows too much\n    switch (keyName) {\n      case 'esc':\n        return 'escape';\n\n      default:\n        return keyName;\n    }\n  }\n\n}\n\nKeyEventsPlugin.ɵfac = function KeyEventsPlugin_Factory(t) {\n  return new (t || KeyEventsPlugin)(i0.ɵɵinject(DOCUMENT));\n};\n\nKeyEventsPlugin.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: KeyEventsPlugin,\n  factory: KeyEventsPlugin.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KeyEventsPlugin, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || !!ngDevMode;\n/**\n * Bootstraps an instance of an Angular application and renders a standalone component as the\n * application's root component. More information about standalone components can be found in [this\n * guide](guide/standalone-components).\n *\n * @usageNotes\n * The root component passed into this function *must* be a standalone one (should have the\n * `standalone: true` flag in the `@Component` decorator config).\n *\n * ```typescript\n * @Component({\n *   standalone: true,\n *   template: 'Hello world!'\n * })\n * class RootComponent {}\n *\n * const appRef: ApplicationRef = await bootstrapApplication(RootComponent);\n * ```\n *\n * You can add the list of providers that should be available in the application injector by\n * specifying the `providers` field in an object passed as the second argument:\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     {provide: BACKEND_URL, useValue: 'https://yourdomain.com/api'}\n *   ]\n * });\n * ```\n *\n * The `importProvidersFrom` helper method can be used to collect all providers from any\n * existing NgModule (and transitively from all NgModules that it imports):\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(SomeNgModule)\n *   ]\n * });\n * ```\n *\n * Note: the `bootstrapApplication` method doesn't include [Testability](api/core/Testability) by\n * default. You can add [Testability](api/core/Testability) by getting the list of necessary\n * providers using `provideProtractorTestingSupport()` function and adding them into the `providers`\n * array, for example:\n *\n * ```typescript\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, {providers: [provideProtractorTestingSupport()]});\n * ```\n *\n * @param rootComponent A reference to a standalone component that should be rendered.\n * @param options Extra configuration for the bootstrap operation, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\n\nfunction bootstrapApplication(rootComponent, options) {\n  return ɵinternalCreateApplication({\n    rootComponent,\n    ...createProvidersConfig(options)\n  });\n}\n/**\n * Create an instance of an Angular application without bootstrapping any components. This is useful\n * for the situation where one wants to decouple application environment creation (a platform and\n * associated injectors) from rendering components on a screen. Components can be subsequently\n * bootstrapped on the returned `ApplicationRef`.\n *\n * @param options Extra configuration for the application environment, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\n\n\nfunction createApplication(options) {\n  return ɵinternalCreateApplication(createProvidersConfig(options));\n}\n\nfunction createProvidersConfig(options) {\n  return {\n    appProviders: [...BROWSER_MODULE_PROVIDERS, ...(options?.providers ?? [])],\n    platformProviders: INTERNAL_BROWSER_PLATFORM_PROVIDERS\n  };\n}\n/**\n * Returns a set of providers required to setup [Testability](api/core/Testability) for an\n * application bootstrapped using the `bootstrapApplication` function. The set of providers is\n * needed to support testing an application with Protractor (which relies on the Testability APIs\n * to be present).\n *\n * @returns An array of providers required to setup Testability for an application and make it\n *     available for testing using Protractor.\n *\n * @publicApi\n */\n\n\nfunction provideProtractorTestingSupport() {\n  // Return a copy to prevent changes to the original array in case any in-place\n  // alterations are performed to the `provideProtractorTestingSupport` call results in app code.\n  return [...TESTABILITY_PROVIDERS];\n}\n\nfunction initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n}\n\nfunction errorHandler() {\n  return new ErrorHandler();\n}\n\nfunction _document() {\n  // Tell ivy about the global document\n  ɵsetDocument(document);\n  return document;\n}\n\nconst INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{\n  provide: PLATFORM_ID,\n  useValue: ɵPLATFORM_BROWSER_ID\n}, {\n  provide: PLATFORM_INITIALIZER,\n  useValue: initDomAdapter,\n  multi: true\n}, {\n  provide: DOCUMENT,\n  useFactory: _document,\n  deps: []\n}];\n/**\n * A factory function that returns a `PlatformRef` instance associated with browser service\n * providers.\n *\n * @publicApi\n */\n\nconst platformBrowser = createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n/**\n * Internal marker to signal whether providers from the `BrowserModule` are already present in DI.\n * This is needed to avoid loading `BrowserModule` providers twice. We can't rely on the\n * `BrowserModule` presence itself, since the standalone-based bootstrap just imports\n * `BrowserModule` providers without referencing the module itself.\n */\n\nconst BROWSER_MODULE_PROVIDERS_MARKER = new InjectionToken(NG_DEV_MODE ? 'BrowserModule Providers Marker' : '');\nconst TESTABILITY_PROVIDERS = [{\n  provide: ɵTESTABILITY_GETTER,\n  useClass: BrowserGetTestability,\n  deps: []\n}, {\n  provide: ɵTESTABILITY,\n  useClass: Testability,\n  deps: [NgZone, TestabilityRegistry, ɵTESTABILITY_GETTER]\n}, {\n  provide: Testability,\n  useClass: Testability,\n  deps: [NgZone, TestabilityRegistry, ɵTESTABILITY_GETTER]\n}];\nconst BROWSER_MODULE_PROVIDERS = [{\n  provide: ɵINJECTOR_SCOPE,\n  useValue: 'root'\n}, {\n  provide: ErrorHandler,\n  useFactory: errorHandler,\n  deps: []\n}, {\n  provide: EVENT_MANAGER_PLUGINS,\n  useClass: DomEventsPlugin,\n  multi: true,\n  deps: [DOCUMENT, NgZone, PLATFORM_ID]\n}, {\n  provide: EVENT_MANAGER_PLUGINS,\n  useClass: KeyEventsPlugin,\n  multi: true,\n  deps: [DOCUMENT]\n}, {\n  provide: DomRendererFactory2,\n  useClass: DomRendererFactory2,\n  deps: [EventManager, DomSharedStylesHost, APP_ID, REMOVE_STYLES_ON_COMPONENT_DESTROY]\n}, {\n  provide: RendererFactory2,\n  useExisting: DomRendererFactory2\n}, {\n  provide: SharedStylesHost,\n  useExisting: DomSharedStylesHost\n}, {\n  provide: DomSharedStylesHost,\n  useClass: DomSharedStylesHost,\n  deps: [DOCUMENT]\n}, {\n  provide: EventManager,\n  useClass: EventManager,\n  deps: [EVENT_MANAGER_PLUGINS, NgZone]\n}, {\n  provide: XhrFactory,\n  useClass: BrowserXhr,\n  deps: []\n}, NG_DEV_MODE ? {\n  provide: BROWSER_MODULE_PROVIDERS_MARKER,\n  useValue: true\n} : []];\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\n\nclass BrowserModule {\n  constructor(providersAlreadyPresent) {\n    if (NG_DEV_MODE && providersAlreadyPresent) {\n      throw new Error(`Providers from the \\`BrowserModule\\` have already been loaded. If you need access ` + `to common directives such as NgIf and NgFor, import the \\`CommonModule\\` instead.`);\n    }\n  }\n  /**\n   * Configures a browser-based app to transition from a server-rendered app, if\n   * one is present on the page.\n   *\n   * @param params An object containing an identifier for the app to transition.\n   * The ID must match between the client and server versions of the app.\n   * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n   */\n\n\n  static withServerTransition(params) {\n    return {\n      ngModule: BrowserModule,\n      providers: [{\n        provide: APP_ID,\n        useValue: params.appId\n      }, {\n        provide: TRANSITION_ID,\n        useExisting: APP_ID\n      }, SERVER_TRANSITION_PROVIDERS]\n    };\n  }\n\n}\n\nBrowserModule.ɵfac = function BrowserModule_Factory(t) {\n  return new (t || BrowserModule)(i0.ɵɵinject(BROWSER_MODULE_PROVIDERS_MARKER, 12));\n};\n\nBrowserModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BrowserModule\n});\nBrowserModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],\n  imports: [CommonModule, ApplicationModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BrowserModule, [{\n    type: NgModule,\n    args: [{\n      providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],\n      exports: [CommonModule, ApplicationModule]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }, {\n        type: Inject,\n        args: [BROWSER_MODULE_PROVIDERS_MARKER]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Factory to create a `Meta` service instance for the current DOM document.\n */\n\n\nfunction createMeta() {\n  return new Meta(ɵɵinject(DOCUMENT));\n}\n/**\n * A service for managing HTML `<meta>` tags.\n *\n * Properties of the `MetaDefinition` object match the attributes of the\n * HTML `<meta>` tag. These tags define document metadata that is important for\n * things like configuring a Content Security Policy, defining browser compatibility\n * and security settings, setting HTTP Headers, defining rich content for social sharing,\n * and Search Engine Optimization (SEO).\n *\n * To identify specific `<meta>` tags in a document, use an attribute selection\n * string in the format `\"tag_attribute='value string'\"`.\n * For example, an `attrSelector` value of `\"name='description'\"` matches a tag\n * whose `name` attribute has the value `\"description\"`.\n * Selectors are used with the `querySelector()` Document method,\n * in the format `meta[{attrSelector}]`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)\n *\n *\n * @publicApi\n */\n\n\nclass Meta {\n  constructor(_doc) {\n    this._doc = _doc;\n    this._dom = ɵgetDOM();\n  }\n  /**\n   * Retrieves or creates a specific `<meta>` tag element in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * If an existing element is found, it is returned and is not modified in any way.\n   * @param tag The definition of a `<meta>` element to match or create.\n   * @param forceCreation True to create a new element without checking whether one already exists.\n   * @returns The existing element with the same attributes and values if found,\n   * the new element if no match is found, or `null` if the tag parameter is not defined.\n   */\n\n\n  addTag(tag, forceCreation = false) {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n  /**\n   * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * @param tags An array of tag definitions to match or create.\n   * @param forceCreation True to create new elements without checking whether they already exist.\n   * @returns The matching elements if found, or the new elements.\n   */\n\n\n  addTags(tags, forceCreation = false) {\n    if (!tags) return [];\n    return tags.reduce((result, tag) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n\n      return result;\n    }, []);\n  }\n  /**\n   * Retrieves a `<meta>` tag element in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching element, if any.\n   */\n\n\n  getTag(attrSelector) {\n    if (!attrSelector) return null;\n    return this._doc.querySelector(`meta[${attrSelector}]`) || null;\n  }\n  /**\n   * Retrieves a set of `<meta>` tag elements in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching elements, if any.\n   */\n\n\n  getTags(attrSelector) {\n    if (!attrSelector) return [];\n\n    const list\n    /*NodeList*/\n    = this._doc.querySelectorAll(`meta[${attrSelector}]`);\n\n    return list ? [].slice.call(list) : [];\n  }\n  /**\n   * Modifies an existing `<meta>` tag element in the current HTML document.\n   * @param tag The tag description with which to replace the existing tag content.\n   * @param selector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   * If not supplied, matches a tag with the same `name` or `property` attribute value as the\n   * replacement tag.\n   * @return The modified element.\n   */\n\n\n  updateTag(tag, selector) {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const meta = this.getTag(selector);\n\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n\n    return this._getOrCreateElement(tag, true);\n  }\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param attrSelector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   */\n\n\n  removeTag(attrSelector) {\n    this.removeTagElement(this.getTag(attrSelector));\n  }\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param meta The tag definition to match against to identify an existing tag.\n   */\n\n\n  removeTagElement(meta) {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n\n  _getOrCreateElement(meta, forceCreation = false) {\n    if (!forceCreation) {\n      const selector = this._parseSelector(meta); // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n\n\n      const elem = this.getTags(selector).filter(elem => this._containsAttributes(meta, elem))[0];\n      if (elem !== undefined) return elem;\n    }\n\n    const element = this._dom.createElement('meta');\n\n    this._setMetaElementAttributes(meta, element);\n\n    const head = this._doc.getElementsByTagName('head')[0];\n\n    head.appendChild(element);\n    return element;\n  }\n\n  _setMetaElementAttributes(tag, el) {\n    Object.keys(tag).forEach(prop => el.setAttribute(this._getMetaKeyMap(prop), tag[prop]));\n    return el;\n  }\n\n  _parseSelector(tag) {\n    const attr = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n\n  _containsAttributes(tag, elem) {\n    return Object.keys(tag).every(key => elem.getAttribute(this._getMetaKeyMap(key)) === tag[key]);\n  }\n\n  _getMetaKeyMap(prop) {\n    return META_KEYS_MAP[prop] || prop;\n  }\n\n}\n\nMeta.ɵfac = function Meta_Factory(t) {\n  return new (t || Meta)(i0.ɵɵinject(DOCUMENT));\n};\n\nMeta.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: Meta,\n  factory: function Meta_Factory(t) {\n    let r = null;\n\n    if (t) {\n      r = new t();\n    } else {\n      r = createMeta();\n    }\n\n    return r;\n  },\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Meta, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      useFactory: createMeta,\n      deps: []\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Mapping for MetaDefinition properties with their correct meta attribute names\n */\n\n\nconst META_KEYS_MAP = {\n  httpEquiv: 'http-equiv'\n};\n/**\n * Factory to create Title service.\n */\n\nfunction createTitle() {\n  return new Title(ɵɵinject(DOCUMENT));\n}\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\n\n\nclass Title {\n  constructor(_doc) {\n    this._doc = _doc;\n  }\n  /**\n   * Get the title of the current HTML document.\n   */\n\n\n  getTitle() {\n    return this._doc.title;\n  }\n  /**\n   * Set the title of the current HTML document.\n   * @param newTitle\n   */\n\n\n  setTitle(newTitle) {\n    this._doc.title = newTitle || '';\n  }\n\n}\n\nTitle.ɵfac = function Title_Factory(t) {\n  return new (t || Title)(i0.ɵɵinject(DOCUMENT));\n};\n\nTitle.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: Title,\n  factory: function Title_Factory(t) {\n    let r = null;\n\n    if (t) {\n      r = new t();\n    } else {\n      r = createTitle();\n    }\n\n    return r;\n  },\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Title, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      useFactory: createTitle,\n      deps: []\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\n\n\nfunction exportNgVar(name, value) {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for angularJS (via `goog.provide('ng....')`).\n    const ng = ɵglobal['ng'] = ɵglobal['ng'] || {};\n    ng[name] = value;\n  }\n}\n\nconst win = typeof window !== 'undefined' && window || {};\n\nclass ChangeDetectionPerfRecord {\n  constructor(msPerTick, numTicks) {\n    this.msPerTick = msPerTick;\n    this.numTicks = numTicks;\n  }\n\n}\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\n\n\nclass AngularProfiler {\n  constructor(ref) {\n    this.appRef = ref.injector.get(ApplicationRef);\n  } // tslint:disable:no-console\n\n  /**\n   * Exercises change detection in a loop and then prints the average amount of\n   * time in milliseconds how long a single round of change detection takes for\n   * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n   * of 500 milliseconds.\n   *\n   * Optionally, a user may pass a `config` parameter containing a map of\n   * options. Supported options are:\n   *\n   * `record` (boolean) - causes the profiler to record a CPU profile while\n   * it exercises the change detector. Example:\n   *\n   * ```\n   * ng.profiler.timeChangeDetection({record: true})\n   * ```\n   */\n\n\n  timeChangeDetection(config) {\n    const record = config && config['record'];\n    const profileName = 'Change Detection'; // Profiler is not available in Android browsers without dev tools opened\n\n    const isProfilerAvailable = win.console.profile != null;\n\n    if (record && isProfilerAvailable) {\n      win.console.profile(profileName);\n    }\n\n    const start = performanceNow();\n    let numTicks = 0;\n\n    while (numTicks < 5 || performanceNow() - start < 500) {\n      this.appRef.tick();\n      numTicks++;\n    }\n\n    const end = performanceNow();\n\n    if (record && isProfilerAvailable) {\n      win.console.profileEnd(profileName);\n    }\n\n    const msPerTick = (end - start) / numTicks;\n    win.console.log(`ran ${numTicks} change detection cycles`);\n    win.console.log(`${msPerTick.toFixed(2)} ms per check`);\n    return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n  }\n\n}\n\nfunction performanceNow() {\n  return win.performance && win.performance.now ? win.performance.now() : new Date().getTime();\n}\n\nconst PROFILER_GLOBAL_NAME = 'profiler';\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * @publicApi\n */\n\nfunction enableDebugTools(ref) {\n  exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\n  return ref;\n}\n/**\n * Disables Angular tools.\n *\n * @publicApi\n */\n\n\nfunction disableDebugTools() {\n  exportNgVar(PROFILER_GLOBAL_NAME, null);\n}\n\nfunction escapeHtml(text) {\n  const escapedText = {\n    '&': '&a;',\n    '\"': '&q;',\n    '\\'': '&s;',\n    '<': '&l;',\n    '>': '&g;'\n  };\n  return text.replace(/[&\"'<>]/g, s => escapedText[s]);\n}\n\nfunction unescapeHtml(text) {\n  const unescapedText = {\n    '&a;': '&',\n    '&q;': '\"',\n    '&s;': '\\'',\n    '&l;': '<',\n    '&g;': '>'\n  };\n  return text.replace(/&[^;]+;/g, s => unescapedText[s]);\n}\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n */\n\n\nfunction makeStateKey(key) {\n  return key;\n}\n/**\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * The `TransferState` is available as an injectable token.\n * On the client, just inject this token using DI and use it, it will be lazily initialized.\n * On the server it's already included if `renderApplication` function is used. Otherwise, import\n * the `ServerTransferStateModule` module to make the `TransferState` available.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialized in a\n * non-lossy manner.\n *\n * @publicApi\n */\n\n\nclass TransferState {\n  constructor() {\n    this.store = {};\n    this.onSerializeCallbacks = {};\n    this.store = retrieveTransferredState(inject(DOCUMENT), inject(APP_ID));\n  }\n  /**\n   * Get the value corresponding to a key. Return `defaultValue` if key is not found.\n   */\n\n\n  get(key, defaultValue) {\n    return this.store[key] !== undefined ? this.store[key] : defaultValue;\n  }\n  /**\n   * Set the value corresponding to a key.\n   */\n\n\n  set(key, value) {\n    this.store[key] = value;\n  }\n  /**\n   * Remove a key from the store.\n   */\n\n\n  remove(key) {\n    delete this.store[key];\n  }\n  /**\n   * Test whether a key exists in the store.\n   */\n\n\n  hasKey(key) {\n    return this.store.hasOwnProperty(key);\n  }\n  /**\n   * Indicates whether the state is empty.\n   */\n\n\n  get isEmpty() {\n    return Object.keys(this.store).length === 0;\n  }\n  /**\n   * Register a callback to provide the value for a key when `toJson` is called.\n   */\n\n\n  onSerialize(key, callback) {\n    this.onSerializeCallbacks[key] = callback;\n  }\n  /**\n   * Serialize the current state of the store to JSON.\n   */\n\n\n  toJson() {\n    // Call the onSerialize callbacks and put those values into the store.\n    for (const key in this.onSerializeCallbacks) {\n      if (this.onSerializeCallbacks.hasOwnProperty(key)) {\n        try {\n          this.store[key] = this.onSerializeCallbacks[key]();\n        } catch (e) {\n          console.warn('Exception in onSerialize callback: ', e);\n        }\n      }\n    }\n\n    return JSON.stringify(this.store);\n  }\n\n}\n\nTransferState.ɵfac = function TransferState_Factory(t) {\n  return new (t || TransferState)();\n};\n\nTransferState.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TransferState,\n  factory: TransferState.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TransferState, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nfunction retrieveTransferredState(doc, appId) {\n  // Locate the script tag with the JSON data transferred from the server.\n  // The id of the script tag is set to the Angular appId + 'state'.\n  const script = doc.getElementById(appId + '-state');\n  let initialState = {};\n\n  if (script && script.textContent) {\n    try {\n      // Avoid using any here as it triggers lint errors in google3 (any is not allowed).\n      initialState = JSON.parse(unescapeHtml(script.textContent));\n    } catch (e) {\n      console.warn('Exception while restoring TransferState for app ' + appId, e);\n    }\n  }\n\n  return initialState;\n}\n/**\n * NgModule to install on the client side while using the `TransferState` to transfer state from\n * server to client.\n *\n * @publicApi\n * @deprecated no longer needed, you can inject the `TransferState` in an app without providing\n *     this module.\n */\n\n\nclass BrowserTransferStateModule {}\n\nBrowserTransferStateModule.ɵfac = function BrowserTransferStateModule_Factory(t) {\n  return new (t || BrowserTransferStateModule)();\n};\n\nBrowserTransferStateModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BrowserTransferStateModule\n});\nBrowserTransferStateModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BrowserTransferStateModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @publicApi\n */\n\n\nclass By {\n  /**\n   * Match all nodes.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n   */\n  static all() {\n    return () => true;\n  }\n  /**\n   * Match elements by the given CSS selector.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n   */\n\n\n  static css(selector) {\n    return debugElement => {\n      return debugElement.nativeElement != null ? elementMatches(debugElement.nativeElement, selector) : false;\n    };\n  }\n  /**\n   * Match nodes that have the given directive present.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n   */\n\n\n  static directive(type) {\n    return debugNode => debugNode.providerTokens.indexOf(type) !== -1;\n  }\n\n}\n\nfunction elementMatches(n, selector) {\n  if (ɵgetDOM().isElementNode(n)) {\n    return n.matches && n.matches(selector) || n.msMatchesSelector && n.msMatchesSelector(selector) || n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n  }\n\n  return false;\n}\n/**\n * Supported HammerJS recognizer event names.\n */\n\n\nconst EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n  'doubletap': true\n};\n/**\n * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.\n * @see `HammerGestureConfig`\n *\n * @ngModule HammerModule\n * @publicApi\n */\n\nconst HAMMER_GESTURE_CONFIG = new InjectionToken('HammerGestureConfig');\n/**\n * Injection token used to provide a {@link HammerLoader} to Angular.\n *\n * @publicApi\n */\n\nconst HAMMER_LOADER = new InjectionToken('HammerLoader');\n/**\n * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\n\nclass HammerGestureConfig {\n  constructor() {\n    /**\n     * A set of supported event names for gestures to be used in Angular.\n     * Angular supports all built-in recognizers, as listed in\n     * [HammerJS documentation](https://hammerjs.github.io/).\n     */\n    this.events = [];\n    /**\n     * Maps gesture event names to a set of configuration options\n     * that specify overrides to the default values for specific properties.\n     *\n     * The key is a supported event name to be configured,\n     * and the options object contains a set of properties, with override values\n     * to be applied to the named recognizer event.\n     * For example, to disable recognition of the rotate event, specify\n     *  `{\"rotate\": {\"enable\": false}}`.\n     *\n     * Properties that are not present take the HammerJS default values.\n     * For information about which properties are supported for which events,\n     * and their allowed and default values, see\n     * [HammerJS documentation](https://hammerjs.github.io/).\n     *\n     */\n\n    this.overrides = {};\n  }\n  /**\n   * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n   * and attaches it to a given HTML element.\n   * @param element The element that will recognize gestures.\n   * @returns A HammerJS event-manager object.\n   */\n\n\n  buildHammer(element) {\n    const mc = new Hammer(element, this.options);\n    mc.get('pinch').set({\n      enable: true\n    });\n    mc.get('rotate').set({\n      enable: true\n    });\n\n    for (const eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\n\n}\n\nHammerGestureConfig.ɵfac = function HammerGestureConfig_Factory(t) {\n  return new (t || HammerGestureConfig)();\n};\n\nHammerGestureConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: HammerGestureConfig,\n  factory: HammerGestureConfig.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HammerGestureConfig, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * Event plugin that adds Hammer support to an application.\n *\n * @ngModule HammerModule\n */\n\n\nclass HammerGesturesPlugin extends EventManagerPlugin {\n  constructor(doc, _config, console, loader) {\n    super(doc);\n    this._config = _config;\n    this.console = console;\n    this.loader = loader;\n    this._loaderPromise = null;\n  }\n\n  supports(eventName) {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n\n    if (!window.Hammer && !this.loader) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        this.console.warn(`The \"${eventName}\" event cannot be bound because Hammer.JS is not ` + `loaded and no custom loader has been specified.`);\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n\n  addEventListener(element, eventName, handler) {\n    const zone = this.manager.getZone();\n    eventName = eventName.toLowerCase(); // If Hammer is not present but a loader is specified, we defer adding the event listener\n    // until Hammer is loaded.\n\n    if (!window.Hammer && this.loader) {\n      this._loaderPromise = this._loaderPromise || zone.runOutsideAngular(() => this.loader()); // This `addEventListener` method returns a function to remove the added listener.\n      // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n      // than remove anything.\n\n      let cancelRegistration = false;\n\n      let deregister = () => {\n        cancelRegistration = true;\n      };\n\n      zone.runOutsideAngular(() => this._loaderPromise.then(() => {\n        // If Hammer isn't actually loaded when the custom loader resolves, give up.\n        if (!window.Hammer) {\n          if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            this.console.warn(`The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n          }\n\n          deregister = () => {};\n\n          return;\n        }\n\n        if (!cancelRegistration) {\n          // Now that Hammer is loaded and the listener is being loaded for real,\n          // the deregistration function changes from canceling registration to\n          // removal.\n          deregister = this.addEventListener(element, eventName, handler);\n        }\n      }).catch(() => {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          this.console.warn(`The \"${eventName}\" event cannot be bound because the custom ` + `Hammer.JS loader failed.`);\n        }\n\n        deregister = () => {};\n      })); // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n      // can change the behavior of `deregister` once the listener is added. Using a closure in\n      // this way allows us to avoid any additional data structures to track listener removal.\n\n      return () => {\n        deregister();\n      };\n    }\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const mc = this._config.buildHammer(element);\n\n      const callback = function (eventObj) {\n        zone.runGuarded(function () {\n          handler(eventObj);\n        });\n      };\n\n      mc.on(eventName, callback);\n      return () => {\n        mc.off(eventName, callback); // destroy mc to prevent memory leak\n\n        if (typeof mc.destroy === 'function') {\n          mc.destroy();\n        }\n      };\n    });\n  }\n\n  isCustomEvent(eventName) {\n    return this._config.events.indexOf(eventName) > -1;\n  }\n\n}\n\nHammerGesturesPlugin.ɵfac = function HammerGesturesPlugin_Factory(t) {\n  return new (t || HammerGesturesPlugin)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(HAMMER_GESTURE_CONFIG), i0.ɵɵinject(i0.ɵConsole), i0.ɵɵinject(HAMMER_LOADER, 8));\n};\n\nHammerGesturesPlugin.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: HammerGesturesPlugin,\n  factory: HammerGesturesPlugin.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HammerGesturesPlugin, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: HammerGestureConfig,\n      decorators: [{\n        type: Inject,\n        args: [HAMMER_GESTURE_CONFIG]\n      }]\n    }, {\n      type: i0.ɵConsole\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [HAMMER_LOADER]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Adds support for HammerJS.\n *\n * Import this module at the root of your application so that Angular can work with\n * HammerJS to detect gesture events.\n *\n * Note that applications still need to include the HammerJS script itself. This module\n * simply sets up the coordination layer between HammerJS and Angular's EventManager.\n *\n * @publicApi\n */\n\n\nclass HammerModule {}\n\nHammerModule.ɵfac = function HammerModule_Factory(t) {\n  return new (t || HammerModule)();\n};\n\nHammerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: HammerModule\n});\nHammerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [{\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: HammerGesturesPlugin,\n    multi: true,\n    deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, ɵConsole, [new Optional(), HAMMER_LOADER]]\n  }, {\n    provide: HAMMER_GESTURE_CONFIG,\n    useClass: HammerGestureConfig,\n    deps: []\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HammerModule, [{\n    type: NgModule,\n    args: [{\n      providers: [{\n        provide: EVENT_MANAGER_PLUGINS,\n        useClass: HammerGesturesPlugin,\n        multi: true,\n        deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, ɵConsole, [new Optional(), HAMMER_LOADER]]\n      }, {\n        provide: HAMMER_GESTURE_CONFIG,\n        useClass: HammerGestureConfig,\n        deps: []\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n\n\nclass DomSanitizer {}\n\nDomSanitizer.ɵfac = function DomSanitizer_Factory(t) {\n  return new (t || DomSanitizer)();\n};\n\nDomSanitizer.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DomSanitizer,\n  factory: function DomSanitizer_Factory(t) {\n    let r = null;\n\n    if (t) {\n      r = new (t || DomSanitizer)();\n    } else {\n      r = i0.ɵɵinject(DomSanitizerImpl);\n    }\n\n    return r;\n  },\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DomSanitizer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      useExisting: forwardRef(() => DomSanitizerImpl)\n    }]\n  }], null, null);\n})();\n\nfunction domSanitizerImplFactory(injector) {\n  return new DomSanitizerImpl(injector.get(DOCUMENT));\n}\n\nclass DomSanitizerImpl extends DomSanitizer {\n  constructor(_doc) {\n    super();\n    this._doc = _doc;\n  }\n\n  sanitize(ctx, value) {\n    if (value == null) return null;\n\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value;\n\n      case SecurityContext.HTML:\n        if (ɵallowSanitizationBypassAndThrow(value, \"HTML\"\n        /* BypassType.Html */\n        )) {\n          return ɵunwrapSafeValue(value);\n        }\n\n        return ɵ_sanitizeHtml(this._doc, String(value)).toString();\n\n      case SecurityContext.STYLE:\n        if (ɵallowSanitizationBypassAndThrow(value, \"Style\"\n        /* BypassType.Style */\n        )) {\n          return ɵunwrapSafeValue(value);\n        }\n\n        return value;\n\n      case SecurityContext.SCRIPT:\n        if (ɵallowSanitizationBypassAndThrow(value, \"Script\"\n        /* BypassType.Script */\n        )) {\n          return ɵunwrapSafeValue(value);\n        }\n\n        throw new Error('unsafe value used in a script context');\n\n      case SecurityContext.URL:\n        if (ɵallowSanitizationBypassAndThrow(value, \"URL\"\n        /* BypassType.Url */\n        )) {\n          return ɵunwrapSafeValue(value);\n        }\n\n        return ɵ_sanitizeUrl(String(value));\n\n      case SecurityContext.RESOURCE_URL:\n        if (ɵallowSanitizationBypassAndThrow(value, \"ResourceURL\"\n        /* BypassType.ResourceUrl */\n        )) {\n          return ɵunwrapSafeValue(value);\n        }\n\n        throw new Error(`unsafe value used in a resource URL context (see ${ɵXSS_SECURITY_URL})`);\n\n      default:\n        throw new Error(`Unexpected SecurityContext ${ctx} (see ${ɵXSS_SECURITY_URL})`);\n    }\n  }\n\n  bypassSecurityTrustHtml(value) {\n    return ɵbypassSanitizationTrustHtml(value);\n  }\n\n  bypassSecurityTrustStyle(value) {\n    return ɵbypassSanitizationTrustStyle(value);\n  }\n\n  bypassSecurityTrustScript(value) {\n    return ɵbypassSanitizationTrustScript(value);\n  }\n\n  bypassSecurityTrustUrl(value) {\n    return ɵbypassSanitizationTrustUrl(value);\n  }\n\n  bypassSecurityTrustResourceUrl(value) {\n    return ɵbypassSanitizationTrustResourceUrl(value);\n  }\n\n}\n\nDomSanitizerImpl.ɵfac = function DomSanitizerImpl_Factory(t) {\n  return new (t || DomSanitizerImpl)(i0.ɵɵinject(DOCUMENT));\n};\n\nDomSanitizerImpl.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DomSanitizerImpl,\n  factory: function DomSanitizerImpl_Factory(t) {\n    let r = null;\n\n    if (t) {\n      r = new t();\n    } else {\n      r = domSanitizerImplFactory(i0.ɵɵinject(Injector));\n    }\n\n    return r;\n  },\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DomSanitizerImpl, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      useFactory: domSanitizerImplFactory,\n      deps: [Injector]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser package.\n */\n\n/**\n * @publicApi\n */\n\n\nconst VERSION = new Version('15.2.10');\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserModule, BrowserTransferStateModule, By, DomSanitizer, EVENT_MANAGER_PLUGINS, EventManager, HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerModule, Meta, REMOVE_STYLES_ON_COMPONENT_DESTROY, Title, TransferState, VERSION, bootstrapApplication, createApplication, disableDebugTools, enableDebugTools, makeStateKey, platformBrowser, provideProtractorTestingSupport, BrowserDomAdapter as ɵBrowserDomAdapter, BrowserGetTestability as ɵBrowserGetTestability, DomEventsPlugin as ɵDomEventsPlugin, DomRendererFactory2 as ɵDomRendererFactory2, DomSanitizerImpl as ɵDomSanitizerImpl, DomSharedStylesHost as ɵDomSharedStylesHost, HammerGesturesPlugin as ɵHammerGesturesPlugin, INTERNAL_BROWSER_PLATFORM_PROVIDERS as ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS, KeyEventsPlugin as ɵKeyEventsPlugin, NAMESPACE_URIS as ɵNAMESPACE_URIS, SharedStylesHost as ɵSharedStylesHost, TRANSITION_ID as ɵTRANSITION_ID, escapeHtml as ɵescapeHtml, flattenStyles as ɵflattenStyles, initDomAdapter as ɵinitDomAdapter, shimContentAttribute as ɵshimContentAttribute, shimHostAttribute as ɵshimHostAttribute };","map":{"version":3,"sources":["D:/www/Cursos/courses-angular/Udemy/Angular-TheCompleteGuide/my-first-app/node_modules/@angular/platform-browser/fesm2020/platform-browser.mjs"],"names":["ɵDomAdapter","ɵsetRootDomAdapter","ɵparseCookieValue","ɵgetDOM","DOCUMENT","ɵPLATFORM_BROWSER_ID","XhrFactory","CommonModule","i0","InjectionToken","ApplicationInitStatus","APP_INITIALIZER","Injector","ɵglobal","Injectable","Inject","ViewEncapsulation","APP_ID","RendererStyleFlags2","ɵinternalCreateApplication","ErrorHandler","ɵsetDocument","PLATFORM_ID","PLATFORM_INITIALIZER","createPlatformFactory","platformCore","ɵTESTABILITY_GETTER","ɵTESTABILITY","Testability","NgZone","TestabilityRegistry","ɵINJECTOR_SCOPE","RendererFactory2","ApplicationModule","NgModule","Optional","SkipSelf","ɵɵinject","ApplicationRef","inject","ɵConsole","forwardRef","ɵXSS_SECURITY_URL","SecurityContext","ɵallowSanitizationBypassAndThrow","ɵunwrapSafeValue","ɵ_sanitizeUrl","ɵ_sanitizeHtml","ɵbypassSanitizationTrustHtml","ɵbypassSanitizationTrustStyle","ɵbypassSanitizationTrustScript","ɵbypassSanitizationTrustUrl","ɵbypassSanitizationTrustResourceUrl","Version","GenericBrowserDomAdapter","constructor","arguments","supportsDOMEvents","BrowserDomAdapter","makeCurrent","onAndCancel","el","evt","listener","addEventListener","removeEventListener","dispatchEvent","remove","node","parentNode","removeChild","createElement","tagName","doc","getDefaultDocument","createHtmlDocument","document","implementation","createHTMLDocument","isElementNode","nodeType","Node","ELEMENT_NODE","isShadowRoot","DocumentFragment","getGlobalEventTarget","target","window","body","getBaseHref","href","getBaseElementHref","relativePath","resetBaseElement","baseElement","getUserAgent","navigator","userAgent","getCookie","name","cookie","querySelector","getAttribute","urlParsingNode","url","setAttribute","pathName","pathname","charAt","TRANSITION_ID","appInitializerFactory","transitionId","injector","get","donePromise","then","dom","styles","querySelectorAll","i","length","SERVER_TRANSITION_PROVIDERS","provide","useFactory","deps","multi","BrowserGetTestability","addToWindow","registry","elem","findInAncestors","testability","findTestabilityInTree","Error","getAllTestabilities","getAllRootElements","whenAllStable","callback","testabilities","count","didWork","decrement","didWork_","forEach","whenStable","push","t","getTestability","host","parentElement","BrowserXhr","build","XMLHttpRequest","ɵfac","ɵprov","type","EVENT_MANAGER_PLUGINS","EventManager","plugins","_zone","_eventNameToPlugin","Map","plugin","manager","_plugins","slice","reverse","element","eventName","handler","_findPluginFor","addGlobalEventListener","getZone","supports","set","undefined","decorators","args","EventManagerPlugin","_doc","SharedStylesHost","usageCount","addStyles","style","changeUsageCount","onStyleAdded","removeStyles","onStyleRemoved","getAllStyles","keys","delta","map","usage","delete","ngOnDestroy","clear","DomSharedStylesHost","styleRef","hostNodes","Set","resetHostNodes","addStyleToHost","styleElements","e","addHost","hostNode","add","removeHost","styleEl","textContent","appendChild","styleElRef","head","NAMESPACE_URIS","COMPONENT_REGEX","NG_DEV_MODE$1","ngDevMode","COMPONENT_VARIABLE","HOST_ATTR","CONTENT_ATTR","REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT","REMOVE_STYLES_ON_COMPONENT_DESTROY","providedIn","factory","shimContentAttribute","componentShortId","replace","shimHostAttribute","flattenStyles","compId","flat","s","decoratePreventDefault","eventHandler","event","allowDefaultBehavior","preventDefault","returnValue","DomRendererFactory2","eventManager","sharedStylesHost","appId","removeStylesOnCompDestory","rendererByCompId","defaultRenderer","DefaultDomRenderer2","createRenderer","renderer","getOrCreateRenderer","EmulatedEncapsulationDomRenderer2","applyToHost","NoneEncapsulationDomRenderer","applyStyles","id","encapsulation","Emulated","ShadowDom","ShadowDomRenderer","onDestroy","begin","end","data","Object","create","destroyNode","destroy","namespace","createElementNS","createComment","value","createText","createTextNode","parent","newChild","targetParent","isTemplateNode","content","insertBefore","refChild","oldChild","selectRootElement","selectorOrNode","preserveContent","nextSibling","namespaceUri","setAttributeNS","removeAttribute","removeAttributeNS","addClass","classList","removeClass","setStyle","flags","DashCase","Important","setProperty","removeStyle","removeProperty","checkNoSyntheticProp","setValue","nodeValue","listen","AT_CHARCODE","charCodeAt","nameKind","hostEl","component","shadowRoot","attachShadow","mode","nodeOrShadowRoot","rendererUsageCount","contentAttr","hostAttr","DomEventsPlugin","MODIFIER_KEYS","_keyMap","MODIFIER_KEY_GETTERS","altKey","ctrlKey","metaKey","shiftKey","KeyEventsPlugin","parseEventName","parsedEvent","outsideHandler","eventCallback","runOutsideAngular","parts","toLowerCase","split","domEventName","shift","key","_normalizeKey","pop","fullKey","codeIX","indexOf","splice","modifierName","index","result","matchEventFullKeyCode","fullKeyCode","keycode","code","modifierGetter","zone","runGuarded","keyName","NG_DEV_MODE","bootstrapApplication","rootComponent","options","createProvidersConfig","createApplication","appProviders","BROWSER_MODULE_PROVIDERS","providers","platformProviders","INTERNAL_BROWSER_PLATFORM_PROVIDERS","provideProtractorTestingSupport","TESTABILITY_PROVIDERS","initDomAdapter","errorHandler","_document","useValue","platformBrowser","BROWSER_MODULE_PROVIDERS_MARKER","useClass","useExisting","BrowserModule","providersAlreadyPresent","withServerTransition","params","ngModule","ɵmod","ɵinj","exports","createMeta","Meta","_dom","addTag","tag","forceCreation","_getOrCreateElement","addTags","tags","reduce","getTag","attrSelector","getTags","list","call","updateTag","selector","_parseSelector","meta","_setMetaElementAttributes","removeTag","removeTagElement","filter","_containsAttributes","getElementsByTagName","prop","_getMetaKeyMap","attr","every","META_KEYS_MAP","httpEquiv","createTitle","Title","getTitle","title","setTitle","newTitle","exportNgVar","COMPILED","ng","win","ChangeDetectionPerfRecord","msPerTick","numTicks","AngularProfiler","ref","appRef","timeChangeDetection","config","record","profileName","isProfilerAvailable","console","profile","start","performanceNow","tick","profileEnd","log","toFixed","performance","now","Date","getTime","PROFILER_GLOBAL_NAME","enableDebugTools","disableDebugTools","escapeHtml","text","escapedText","unescapeHtml","unescapedText","makeStateKey","TransferState","store","onSerializeCallbacks","retrieveTransferredState","defaultValue","hasKey","hasOwnProperty","isEmpty","onSerialize","toJson","warn","JSON","stringify","script","getElementById","initialState","parse","BrowserTransferStateModule","By","all","css","debugElement","nativeElement","elementMatches","directive","debugNode","providerTokens","n","matches","msMatchesSelector","webkitMatchesSelector","EVENT_NAMES","HAMMER_GESTURE_CONFIG","HAMMER_LOADER","HammerGestureConfig","events","overrides","buildHammer","mc","Hammer","enable","HammerGesturesPlugin","_config","loader","_loaderPromise","isCustomEvent","cancelRegistration","deregister","catch","eventObj","on","off","HammerModule","DomSanitizer","DomSanitizerImpl","domSanitizerImplFactory","sanitize","ctx","NONE","HTML","String","toString","STYLE","SCRIPT","URL","RESOURCE_URL","bypassSecurityTrustHtml","bypassSecurityTrustStyle","bypassSecurityTrustScript","bypassSecurityTrustUrl","bypassSecurityTrustResourceUrl","VERSION","ɵBrowserDomAdapter","ɵBrowserGetTestability","ɵDomEventsPlugin","ɵDomRendererFactory2","ɵDomSanitizerImpl","ɵDomSharedStylesHost","ɵHammerGesturesPlugin","ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS","ɵKeyEventsPlugin","ɵNAMESPACE_URIS","ɵSharedStylesHost","ɵTRANSITION_ID","ɵescapeHtml","ɵflattenStyles","ɵinitDomAdapter","ɵshimContentAttribute","ɵshimHostAttribute"],"mappings":"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AI,EAAE7I;AADwG,GAAD,CAAzH,EAE4B,YAAY;AAAE,WAAO,CAAC;AAAE6I,MAAAA,IAAI,EAAEoB,SAAR;AAAmBC,MAAAA,UAAU,EAAE,CAAC;AAC9DrB,QAAAA,IAAI,EAAE5I,MADwD;AAE9DkK,QAAAA,IAAI,EAAE,CAAC7K,QAAD;AAFwD,OAAD;AAA/B,KAAD,CAAP;AAGlB,GALxB;AAAA;;AAOA,MAAM2V,WAAW,GAAG,OAAOvI,SAAP,KAAqB,WAArB,IAAoC,CAAC,CAACA,SAA1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASwI,oBAAT,CAA8BC,aAA9B,EAA6CC,OAA7C,EAAsD;AAClD,SAAO/U,0BAA0B,CAAC;AAAE8U,IAAAA,aAAF;AAAiB,OAAGE,qBAAqB,CAACD,OAAD;AAAzC,GAAD,CAAjC;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,iBAAT,CAA2BF,OAA3B,EAAoC;AAChC,SAAO/U,0BAA0B,CAACgV,qBAAqB,CAACD,OAAD,CAAtB,CAAjC;AACH;;AACD,SAASC,qBAAT,CAA+BD,OAA/B,EAAwC;AACpC,SAAO;AACHG,IAAAA,YAAY,EAAE,CACV,GAAGC,wBADO,EAEV,IAAIJ,OAAO,EAAEK,SAAT,IAAsB,EAA1B,CAFU,CADX;AAKHC,IAAAA,iBAAiB,EAAEC;AALhB,GAAP;AAOH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,+BAAT,GAA2C;AACvC;AACA;AACA,SAAO,CAAC,GAAGC,qBAAJ,CAAP;AACH;;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","sourcesContent":["/**\n * @license Angular v15.2.10\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ɵDomAdapter, ɵsetRootDomAdapter, ɵparseCookieValue, ɵgetDOM, DOCUMENT, ɵPLATFORM_BROWSER_ID, XhrFactory, CommonModule } from '@angular/common';\nexport { ɵgetDOM } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, ApplicationInitStatus, APP_INITIALIZER, Injector, ɵglobal, Injectable, Inject, ViewEncapsulation, APP_ID, RendererStyleFlags2, ɵinternalCreateApplication, ErrorHandler, ɵsetDocument, PLATFORM_ID, PLATFORM_INITIALIZER, createPlatformFactory, platformCore, ɵTESTABILITY_GETTER, ɵTESTABILITY, Testability, NgZone, TestabilityRegistry, ɵINJECTOR_SCOPE, RendererFactory2, ApplicationModule, NgModule, Optional, SkipSelf, ɵɵinject, ApplicationRef, inject, ɵConsole, forwardRef, ɵXSS_SECURITY_URL, SecurityContext, ɵallowSanitizationBypassAndThrow, ɵunwrapSafeValue, ɵ_sanitizeUrl, ɵ_sanitizeHtml, ɵbypassSanitizationTrustHtml, ɵbypassSanitizationTrustStyle, ɵbypassSanitizationTrustScript, ɵbypassSanitizationTrustUrl, ɵbypassSanitizationTrustResourceUrl, Version } from '@angular/core';\n\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nclass GenericBrowserDomAdapter extends ɵDomAdapter {\n    constructor() {\n        super(...arguments);\n        this.supportsDOMEvents = true;\n    }\n}\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nclass BrowserDomAdapter extends GenericBrowserDomAdapter {\n    static makeCurrent() {\n        ɵsetRootDomAdapter(new BrowserDomAdapter());\n    }\n    onAndCancel(el, evt, listener) {\n        el.addEventListener(evt, listener, false);\n        // Needed to follow Dart's subscription semantic, until fix of\n        // https://code.google.com/p/dart/issues/detail?id=17406\n        return () => {\n            el.removeEventListener(evt, listener, false);\n        };\n    }\n    dispatchEvent(el, evt) {\n        el.dispatchEvent(evt);\n    }\n    remove(node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(node);\n        }\n    }\n    createElement(tagName, doc) {\n        doc = doc || this.getDefaultDocument();\n        return doc.createElement(tagName);\n    }\n    createHtmlDocument() {\n        return document.implementation.createHTMLDocument('fakeTitle');\n    }\n    getDefaultDocument() {\n        return document;\n    }\n    isElementNode(node) {\n        return node.nodeType === Node.ELEMENT_NODE;\n    }\n    isShadowRoot(node) {\n        return node instanceof DocumentFragment;\n    }\n    /** @deprecated No longer being used in Ivy code. To be removed in version 14. */\n    getGlobalEventTarget(doc, target) {\n        if (target === 'window') {\n            return window;\n        }\n        if (target === 'document') {\n            return doc;\n        }\n        if (target === 'body') {\n            return doc.body;\n        }\n        return null;\n    }\n    getBaseHref(doc) {\n        const href = getBaseElementHref();\n        return href == null ? null : relativePath(href);\n    }\n    resetBaseElement() {\n        baseElement = null;\n    }\n    getUserAgent() {\n        return window.navigator.userAgent;\n    }\n    getCookie(name) {\n        return ɵparseCookieValue(document.cookie, name);\n    }\n}\nlet baseElement = null;\nfunction getBaseElementHref() {\n    baseElement = baseElement || document.querySelector('base');\n    return baseElement ? baseElement.getAttribute('href') : null;\n}\n// based on urlUtils.js in AngularJS 1\nlet urlParsingNode;\nfunction relativePath(url) {\n    urlParsingNode = urlParsingNode || document.createElement('a');\n    urlParsingNode.setAttribute('href', url);\n    const pathName = urlParsingNode.pathname;\n    return pathName.charAt(0) === '/' ? pathName : `/${pathName}`;\n}\n\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\nconst TRANSITION_ID = new InjectionToken('TRANSITION_ID');\nfunction appInitializerFactory(transitionId, document, injector) {\n    return () => {\n        // Wait for all application initializers to be completed before removing the styles set by\n        // the server.\n        injector.get(ApplicationInitStatus).donePromise.then(() => {\n            const dom = ɵgetDOM();\n            const styles = document.querySelectorAll(`style[ng-transition=\"${transitionId}\"]`);\n            for (let i = 0; i < styles.length; i++) {\n                dom.remove(styles[i]);\n            }\n        });\n    };\n}\nconst SERVER_TRANSITION_PROVIDERS = [\n    {\n        provide: APP_INITIALIZER,\n        useFactory: appInitializerFactory,\n        deps: [TRANSITION_ID, DOCUMENT, Injector],\n        multi: true\n    },\n];\n\nclass BrowserGetTestability {\n    addToWindow(registry) {\n        ɵglobal['getAngularTestability'] = (elem, findInAncestors = true) => {\n            const testability = registry.findTestabilityInTree(elem, findInAncestors);\n            if (testability == null) {\n                throw new Error('Could not find testability for element.');\n            }\n            return testability;\n        };\n        ɵglobal['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n        ɵglobal['getAllAngularRootElements'] = () => registry.getAllRootElements();\n        const whenAllStable = (callback /** TODO #9100 */) => {\n            const testabilities = ɵglobal['getAllAngularTestabilities']();\n            let count = testabilities.length;\n            let didWork = false;\n            const decrement = function (didWork_ /** TODO #9100 */) {\n                didWork = didWork || didWork_;\n                count--;\n                if (count == 0) {\n                    callback(didWork);\n                }\n            };\n            testabilities.forEach(function (testability /** TODO #9100 */) {\n                testability.whenStable(decrement);\n            });\n        };\n        if (!ɵglobal['frameworkStabilizers']) {\n            ɵglobal['frameworkStabilizers'] = [];\n        }\n        ɵglobal['frameworkStabilizers'].push(whenAllStable);\n    }\n    findTestabilityInTree(registry, elem, findInAncestors) {\n        if (elem == null) {\n            return null;\n        }\n        const t = registry.getTestability(elem);\n        if (t != null) {\n            return t;\n        }\n        else if (!findInAncestors) {\n            return null;\n        }\n        if (ɵgetDOM().isShadowRoot(elem)) {\n            return this.findTestabilityInTree(registry, elem.host, true);\n        }\n        return this.findTestabilityInTree(registry, elem.parentElement, true);\n    }\n}\n\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n */\nclass BrowserXhr {\n    build() {\n        return new XMLHttpRequest();\n    }\n}\nBrowserXhr.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: BrowserXhr, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nBrowserXhr.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: BrowserXhr });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: BrowserXhr, decorators: [{\n            type: Injectable\n        }] });\n\n/**\n * The injection token for the event-manager plug-in service.\n *\n * @publicApi\n */\nconst EVENT_MANAGER_PLUGINS = new InjectionToken('EventManagerPlugins');\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\nclass EventManager {\n    /**\n     * Initializes an instance of the event-manager service.\n     */\n    constructor(plugins, _zone) {\n        this._zone = _zone;\n        this._eventNameToPlugin = new Map();\n        plugins.forEach((plugin) => {\n            plugin.manager = this;\n        });\n        this._plugins = plugins.slice().reverse();\n    }\n    /**\n     * Registers a handler for a specific element and event.\n     *\n     * @param element The HTML element to receive event notifications.\n     * @param eventName The name of the event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns  A callback function that can be used to remove the handler.\n     */\n    addEventListener(element, eventName, handler) {\n        const plugin = this._findPluginFor(eventName);\n        return plugin.addEventListener(element, eventName, handler);\n    }\n    /**\n     * Registers a global handler for an event in a target view.\n     *\n     * @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n     * @param eventName The name of the event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns A callback function that can be used to remove the handler.\n     * @deprecated No longer being used in Ivy code. To be removed in version 14.\n     */\n    addGlobalEventListener(target, eventName, handler) {\n        const plugin = this._findPluginFor(eventName);\n        return plugin.addGlobalEventListener(target, eventName, handler);\n    }\n    /**\n     * Retrieves the compilation zone in which event listeners are registered.\n     */\n    getZone() {\n        return this._zone;\n    }\n    /** @internal */\n    _findPluginFor(eventName) {\n        const plugin = this._eventNameToPlugin.get(eventName);\n        if (plugin) {\n            return plugin;\n        }\n        const plugins = this._plugins;\n        for (let i = 0; i < plugins.length; i++) {\n            const plugin = plugins[i];\n            if (plugin.supports(eventName)) {\n                this._eventNameToPlugin.set(eventName, plugin);\n                return plugin;\n            }\n        }\n        throw new Error(`No event manager plugin found for event ${eventName}`);\n    }\n}\nEventManager.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: EventManager, deps: [{ token: EVENT_MANAGER_PLUGINS }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nEventManager.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: EventManager });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: EventManager, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [EVENT_MANAGER_PLUGINS]\n                }] }, { type: i0.NgZone }]; } });\nclass EventManagerPlugin {\n    constructor(_doc) {\n        this._doc = _doc;\n    }\n    addGlobalEventListener(element, eventName, handler) {\n        const target = ɵgetDOM().getGlobalEventTarget(this._doc, element);\n        if (!target) {\n            throw new Error(`Unsupported event target ${target} for event ${eventName}`);\n        }\n        return this.addEventListener(target, eventName, handler);\n    }\n}\n\nclass SharedStylesHost {\n    constructor() {\n        this.usageCount = new Map();\n    }\n    addStyles(styles) {\n        for (const style of styles) {\n            const usageCount = this.changeUsageCount(style, 1);\n            if (usageCount === 1) {\n                this.onStyleAdded(style);\n            }\n        }\n    }\n    removeStyles(styles) {\n        for (const style of styles) {\n            const usageCount = this.changeUsageCount(style, -1);\n            if (usageCount === 0) {\n                this.onStyleRemoved(style);\n            }\n        }\n    }\n    onStyleRemoved(style) { }\n    onStyleAdded(style) { }\n    getAllStyles() {\n        return this.usageCount.keys();\n    }\n    changeUsageCount(style, delta) {\n        const map = this.usageCount;\n        let usage = map.get(style) ?? 0;\n        usage += delta;\n        if (usage > 0) {\n            map.set(style, usage);\n        }\n        else {\n            map.delete(style);\n        }\n        return usage;\n    }\n    ngOnDestroy() {\n        for (const style of this.getAllStyles()) {\n            this.onStyleRemoved(style);\n        }\n        this.usageCount.clear();\n    }\n}\nSharedStylesHost.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: SharedStylesHost, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nSharedStylesHost.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: SharedStylesHost });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: SharedStylesHost, decorators: [{\n            type: Injectable\n        }] });\nclass DomSharedStylesHost extends SharedStylesHost {\n    constructor(doc) {\n        super();\n        this.doc = doc;\n        // Maps all registered host nodes to a list of style nodes that have been added to the host node.\n        this.styleRef = new Map();\n        this.hostNodes = new Set();\n        this.resetHostNodes();\n    }\n    onStyleAdded(style) {\n        for (const host of this.hostNodes) {\n            this.addStyleToHost(host, style);\n        }\n    }\n    onStyleRemoved(style) {\n        const styleRef = this.styleRef;\n        const styleElements = styleRef.get(style);\n        styleElements?.forEach(e => e.remove());\n        styleRef.delete(style);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this.styleRef.clear();\n        this.resetHostNodes();\n    }\n    addHost(hostNode) {\n        this.hostNodes.add(hostNode);\n        for (const style of this.getAllStyles()) {\n            this.addStyleToHost(hostNode, style);\n        }\n    }\n    removeHost(hostNode) {\n        this.hostNodes.delete(hostNode);\n    }\n    addStyleToHost(host, style) {\n        const styleEl = this.doc.createElement('style');\n        styleEl.textContent = style;\n        host.appendChild(styleEl);\n        const styleElRef = this.styleRef.get(style);\n        if (styleElRef) {\n            styleElRef.push(styleEl);\n        }\n        else {\n            this.styleRef.set(style, [styleEl]);\n        }\n    }\n    resetHostNodes() {\n        const hostNodes = this.hostNodes;\n        hostNodes.clear();\n        // Re-add the head element back since this is the default host.\n        hostNodes.add(this.doc.head);\n    }\n}\nDomSharedStylesHost.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: DomSharedStylesHost, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nDomSharedStylesHost.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: DomSharedStylesHost });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: DomSharedStylesHost, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\nconst NAMESPACE_URIS = {\n    'svg': 'http://www.w3.org/2000/svg',\n    'xhtml': 'http://www.w3.org/1999/xhtml',\n    'xlink': 'http://www.w3.org/1999/xlink',\n    'xml': 'http://www.w3.org/XML/1998/namespace',\n    'xmlns': 'http://www.w3.org/2000/xmlns/',\n    'math': 'http://www.w3.org/1998/MathML/',\n};\nconst COMPONENT_REGEX = /%COMP%/g;\nconst NG_DEV_MODE$1 = typeof ngDevMode === 'undefined' || !!ngDevMode;\nconst COMPONENT_VARIABLE = '%COMP%';\nconst HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nconst CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n/**\n * The default value for the `REMOVE_STYLES_ON_COMPONENT_DESTROY` DI token.\n */\nconst REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT = false;\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates whether styles\n * of destroyed components should be removed from DOM.\n *\n * By default, the value is set to `false`. This will be changed in the next major version.\n * @publicApi\n */\nconst REMOVE_STYLES_ON_COMPONENT_DESTROY = new InjectionToken('RemoveStylesOnCompDestory', {\n    providedIn: 'root',\n    factory: () => REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT,\n});\nfunction shimContentAttribute(componentShortId) {\n    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\nfunction shimHostAttribute(componentShortId) {\n    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\nfunction flattenStyles(compId, styles) {\n    // Cannot use `Infinity` as depth as `infinity` is not a number literal in TypeScript.\n    // See: https://github.com/microsoft/TypeScript/issues/32277\n    return styles.flat(100).map(s => s.replace(COMPONENT_REGEX, compId));\n}\nfunction decoratePreventDefault(eventHandler) {\n    // `DebugNode.triggerEventHandler` needs to know if the listener was created with\n    // decoratePreventDefault or is a listener added outside the Angular context so it can handle the\n    // two differently. In the first case, the special '__ngUnwrap__' token is passed to the unwrap\n    // the listener (see below).\n    return (event) => {\n        // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function\n        // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The debug_node\n        // can inspect the listener toString contents for the existence of this special token. Because\n        // the token is a string literal, it is ensured to not be modified by compiled code.\n        if (event === '__ngUnwrap__') {\n            return eventHandler;\n        }\n        const allowDefaultBehavior = eventHandler(event);\n        if (allowDefaultBehavior === false) {\n            // TODO(tbosch): move preventDefault into event plugins...\n            event.preventDefault();\n            event.returnValue = false;\n        }\n        return undefined;\n    };\n}\nclass DomRendererFactory2 {\n    constructor(eventManager, sharedStylesHost, appId, removeStylesOnCompDestory) {\n        this.eventManager = eventManager;\n        this.sharedStylesHost = sharedStylesHost;\n        this.appId = appId;\n        this.removeStylesOnCompDestory = removeStylesOnCompDestory;\n        this.rendererByCompId = new Map();\n        this.defaultRenderer = new DefaultDomRenderer2(eventManager);\n    }\n    createRenderer(element, type) {\n        if (!element || !type) {\n            return this.defaultRenderer;\n        }\n        const renderer = this.getOrCreateRenderer(element, type);\n        // Renderers have different logic due to different encapsulation behaviours.\n        // Ex: for emulated, an attribute is added to the element.\n        if (renderer instanceof EmulatedEncapsulationDomRenderer2) {\n            renderer.applyToHost(element);\n        }\n        else if (renderer instanceof NoneEncapsulationDomRenderer) {\n            renderer.applyStyles();\n        }\n        return renderer;\n    }\n    getOrCreateRenderer(element, type) {\n        const rendererByCompId = this.rendererByCompId;\n        let renderer = rendererByCompId.get(type.id);\n        if (!renderer) {\n            const eventManager = this.eventManager;\n            const sharedStylesHost = this.sharedStylesHost;\n            const removeStylesOnCompDestory = this.removeStylesOnCompDestory;\n            switch (type.encapsulation) {\n                case ViewEncapsulation.Emulated:\n                    renderer = new EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, type, this.appId, removeStylesOnCompDestory);\n                    break;\n                case ViewEncapsulation.ShadowDom:\n                    return new ShadowDomRenderer(eventManager, sharedStylesHost, element, type);\n                default:\n                    renderer = new NoneEncapsulationDomRenderer(eventManager, sharedStylesHost, type, removeStylesOnCompDestory);\n                    break;\n            }\n            renderer.onDestroy = () => rendererByCompId.delete(type.id);\n            rendererByCompId.set(type.id, renderer);\n        }\n        return renderer;\n    }\n    ngOnDestroy() {\n        this.rendererByCompId.clear();\n    }\n    begin() { }\n    end() { }\n}\nDomRendererFactory2.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: DomRendererFactory2, deps: [{ token: EventManager }, { token: DomSharedStylesHost }, { token: APP_ID }, { token: REMOVE_STYLES_ON_COMPONENT_DESTROY }], target: i0.ɵɵFactoryTarget.Injectable });\nDomRendererFactory2.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: DomRendererFactory2 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: DomRendererFactory2, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: EventManager }, { type: DomSharedStylesHost }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [APP_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [REMOVE_STYLES_ON_COMPONENT_DESTROY]\n                }] }]; } });\nclass DefaultDomRenderer2 {\n    constructor(eventManager) {\n        this.eventManager = eventManager;\n        this.data = Object.create(null);\n        this.destroyNode = null;\n    }\n    destroy() { }\n    createElement(name, namespace) {\n        if (namespace) {\n            // TODO: `|| namespace` was added in\n            // https://github.com/angular/angular/commit/2b9cc8503d48173492c29f5a271b61126104fbdb to\n            // support how Ivy passed around the namespace URI rather than short name at the time. It did\n            // not, however extend the support to other parts of the system (setAttribute, setAttribute,\n            // and the ServerRenderer). We should decide what exactly the semantics for dealing with\n            // namespaces should be and make it consistent.\n            // Related issues:\n            // https://github.com/angular/angular/issues/44028\n            // https://github.com/angular/angular/issues/44883\n            return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n        }\n        return document.createElement(name);\n    }\n    createComment(value) {\n        return document.createComment(value);\n    }\n    createText(value) {\n        return document.createTextNode(value);\n    }\n    appendChild(parent, newChild) {\n        const targetParent = isTemplateNode(parent) ? parent.content : parent;\n        targetParent.appendChild(newChild);\n    }\n    insertBefore(parent, newChild, refChild) {\n        if (parent) {\n            const targetParent = isTemplateNode(parent) ? parent.content : parent;\n            targetParent.insertBefore(newChild, refChild);\n        }\n    }\n    removeChild(parent, oldChild) {\n        if (parent) {\n            parent.removeChild(oldChild);\n        }\n    }\n    selectRootElement(selectorOrNode, preserveContent) {\n        let el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\n            selectorOrNode;\n        if (!el) {\n            throw new Error(`The selector \"${selectorOrNode}\" did not match any elements`);\n        }\n        if (!preserveContent) {\n            el.textContent = '';\n        }\n        return el;\n    }\n    parentNode(node) {\n        return node.parentNode;\n    }\n    nextSibling(node) {\n        return node.nextSibling;\n    }\n    setAttribute(el, name, value, namespace) {\n        if (namespace) {\n            name = namespace + ':' + name;\n            const namespaceUri = NAMESPACE_URIS[namespace];\n            if (namespaceUri) {\n                el.setAttributeNS(namespaceUri, name, value);\n            }\n            else {\n                el.setAttribute(name, value);\n            }\n        }\n        else {\n            el.setAttribute(name, value);\n        }\n    }\n    removeAttribute(el, name, namespace) {\n        if (namespace) {\n            const namespaceUri = NAMESPACE_URIS[namespace];\n            if (namespaceUri) {\n                el.removeAttributeNS(namespaceUri, name);\n            }\n            else {\n                el.removeAttribute(`${namespace}:${name}`);\n            }\n        }\n        else {\n            el.removeAttribute(name);\n        }\n    }\n    addClass(el, name) {\n        el.classList.add(name);\n    }\n    removeClass(el, name) {\n        el.classList.remove(name);\n    }\n    setStyle(el, style, value, flags) {\n        if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {\n            el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? 'important' : '');\n        }\n        else {\n            el.style[style] = value;\n        }\n    }\n    removeStyle(el, style, flags) {\n        if (flags & RendererStyleFlags2.DashCase) {\n            // removeProperty has no effect when used on camelCased properties.\n            el.style.removeProperty(style);\n        }\n        else {\n            el.style[style] = '';\n        }\n    }\n    setProperty(el, name, value) {\n        NG_DEV_MODE$1 && checkNoSyntheticProp(name, 'property');\n        el[name] = value;\n    }\n    setValue(node, value) {\n        node.nodeValue = value;\n    }\n    listen(target, event, callback) {\n        NG_DEV_MODE$1 && checkNoSyntheticProp(event, 'listener');\n        if (typeof target === 'string') {\n            return this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback));\n        }\n        return this.eventManager.addEventListener(target, event, decoratePreventDefault(callback));\n    }\n}\nconst AT_CHARCODE = (() => '@'.charCodeAt(0))();\nfunction checkNoSyntheticProp(name, nameKind) {\n    if (name.charCodeAt(0) === AT_CHARCODE) {\n        throw new Error(`Unexpected synthetic ${nameKind} ${name} found. Please make sure that:\n  - Either \\`BrowserAnimationsModule\\` or \\`NoopAnimationsModule\\` are imported in your application.\n  - There is corresponding configuration for the animation named \\`${name}\\` defined in the \\`animations\\` field of the \\`@Component\\` decorator (see https://angular.io/api/core/Component#animations).`);\n    }\n}\nfunction isTemplateNode(node) {\n    return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n    constructor(eventManager, sharedStylesHost, hostEl, component) {\n        super(eventManager);\n        this.sharedStylesHost = sharedStylesHost;\n        this.hostEl = hostEl;\n        this.shadowRoot = hostEl.attachShadow({ mode: 'open' });\n        this.sharedStylesHost.addHost(this.shadowRoot);\n        const styles = flattenStyles(component.id, component.styles);\n        for (const style of styles) {\n            const styleEl = document.createElement('style');\n            styleEl.textContent = style;\n            this.shadowRoot.appendChild(styleEl);\n        }\n    }\n    nodeOrShadowRoot(node) {\n        return node === this.hostEl ? this.shadowRoot : node;\n    }\n    appendChild(parent, newChild) {\n        return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n    }\n    insertBefore(parent, newChild, refChild) {\n        return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n    }\n    removeChild(parent, oldChild) {\n        return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n    }\n    parentNode(node) {\n        return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n    }\n    destroy() {\n        this.sharedStylesHost.removeHost(this.shadowRoot);\n    }\n}\nclass NoneEncapsulationDomRenderer extends DefaultDomRenderer2 {\n    constructor(eventManager, sharedStylesHost, component, removeStylesOnCompDestory, compId = component.id) {\n        super(eventManager);\n        this.sharedStylesHost = sharedStylesHost;\n        this.removeStylesOnCompDestory = removeStylesOnCompDestory;\n        this.rendererUsageCount = 0;\n        this.styles = flattenStyles(compId, component.styles);\n    }\n    applyStyles() {\n        this.sharedStylesHost.addStyles(this.styles);\n        this.rendererUsageCount++;\n    }\n    destroy() {\n        if (!this.removeStylesOnCompDestory) {\n            return;\n        }\n        this.sharedStylesHost.removeStyles(this.styles);\n        this.rendererUsageCount--;\n        if (this.rendererUsageCount === 0) {\n            this.onDestroy?.();\n        }\n    }\n}\nclass EmulatedEncapsulationDomRenderer2 extends NoneEncapsulationDomRenderer {\n    constructor(eventManager, sharedStylesHost, component, appId, removeStylesOnCompDestory) {\n        const compId = appId + '-' + component.id;\n        super(eventManager, sharedStylesHost, component, removeStylesOnCompDestory, compId);\n        this.contentAttr = shimContentAttribute(compId);\n        this.hostAttr = shimHostAttribute(compId);\n    }\n    applyToHost(element) {\n        this.applyStyles();\n        this.setAttribute(element, this.hostAttr, '');\n    }\n    createElement(parent, name) {\n        const el = super.createElement(parent, name);\n        super.setAttribute(el, this.contentAttr, '');\n        return el;\n    }\n}\n\nclass DomEventsPlugin extends EventManagerPlugin {\n    constructor(doc) {\n        super(doc);\n    }\n    // This plugin should come last in the list of plugins, because it accepts all\n    // events.\n    supports(eventName) {\n        return true;\n    }\n    addEventListener(element, eventName, handler) {\n        element.addEventListener(eventName, handler, false);\n        return () => this.removeEventListener(element, eventName, handler);\n    }\n    removeEventListener(target, eventName, callback) {\n        return target.removeEventListener(eventName, callback);\n    }\n}\nDomEventsPlugin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: DomEventsPlugin, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nDomEventsPlugin.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: DomEventsPlugin });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: DomEventsPlugin, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * Defines supported modifiers for key events.\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n// The following values are here for cross-browser compatibility and to match the W3C standard\n// cf https://www.w3.org/TR/DOM-Level-3-Events-key/\nconst _keyMap = {\n    '\\b': 'Backspace',\n    '\\t': 'Tab',\n    '\\x7F': 'Delete',\n    '\\x1B': 'Escape',\n    'Del': 'Delete',\n    'Esc': 'Escape',\n    'Left': 'ArrowLeft',\n    'Right': 'ArrowRight',\n    'Up': 'ArrowUp',\n    'Down': 'ArrowDown',\n    'Menu': 'ContextMenu',\n    'Scroll': 'ScrollLock',\n    'Win': 'OS'\n};\n/**\n * Retrieves modifiers from key-event objects.\n */\nconst MODIFIER_KEY_GETTERS = {\n    'alt': (event) => event.altKey,\n    'control': (event) => event.ctrlKey,\n    'meta': (event) => event.metaKey,\n    'shift': (event) => event.shiftKey\n};\n/**\n * @publicApi\n * A browser plug-in that provides support for handling of key events in Angular.\n */\nclass KeyEventsPlugin extends EventManagerPlugin {\n    /**\n     * Initializes an instance of the browser plug-in.\n     * @param doc The document in which key events will be detected.\n     */\n    constructor(doc) {\n        super(doc);\n    }\n    /**\n     * Reports whether a named key event is supported.\n     * @param eventName The event name to query.\n     * @return True if the named key event is supported.\n     */\n    supports(eventName) {\n        return KeyEventsPlugin.parseEventName(eventName) != null;\n    }\n    /**\n     * Registers a handler for a specific element and key event.\n     * @param element The HTML element to receive event notifications.\n     * @param eventName The name of the key event to listen for.\n     * @param handler A function to call when the notification occurs. Receives the\n     * event object as an argument.\n     * @returns The key event that was registered.\n     */\n    addEventListener(element, eventName, handler) {\n        const parsedEvent = KeyEventsPlugin.parseEventName(eventName);\n        const outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n        return this.manager.getZone().runOutsideAngular(() => {\n            return ɵgetDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n        });\n    }\n    /**\n     * Parses the user provided full keyboard event definition and normalizes it for\n     * later internal use. It ensures the string is all lowercase, converts special\n     * characters to a standard spelling, and orders all the values consistently.\n     *\n     * @param eventName The name of the key event to listen for.\n     * @returns an object with the full, normalized string, and the dom event name\n     * or null in the case when the event doesn't match a keyboard event.\n     */\n    static parseEventName(eventName) {\n        const parts = eventName.toLowerCase().split('.');\n        const domEventName = parts.shift();\n        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n            return null;\n        }\n        const key = KeyEventsPlugin._normalizeKey(parts.pop());\n        let fullKey = '';\n        let codeIX = parts.indexOf('code');\n        if (codeIX > -1) {\n            parts.splice(codeIX, 1);\n            fullKey = 'code.';\n        }\n        MODIFIER_KEYS.forEach(modifierName => {\n            const index = parts.indexOf(modifierName);\n            if (index > -1) {\n                parts.splice(index, 1);\n                fullKey += modifierName + '.';\n            }\n        });\n        fullKey += key;\n        if (parts.length != 0 || key.length === 0) {\n            // returning null instead of throwing to let another plugin process the event\n            return null;\n        }\n        // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.\n        //       The code must remain in the `result['domEventName']` form.\n        // return {domEventName, fullKey};\n        const result = {};\n        result['domEventName'] = domEventName;\n        result['fullKey'] = fullKey;\n        return result;\n    }\n    /**\n     * Determines whether the actual keys pressed match the configured key code string.\n     * The `fullKeyCode` event is normalized in the `parseEventName` method when the\n     * event is attached to the DOM during the `addEventListener` call. This is unseen\n     * by the end user and is normalized for internal consistency and parsing.\n     *\n     * @param event The keyboard event.\n     * @param fullKeyCode The normalized user defined expected key event string\n     * @returns boolean.\n     */\n    static matchEventFullKeyCode(event, fullKeyCode) {\n        let keycode = _keyMap[event.key] || event.key;\n        let key = '';\n        if (fullKeyCode.indexOf('code.') > -1) {\n            keycode = event.code;\n            key = 'code.';\n        }\n        // the keycode could be unidentified so we have to check here\n        if (keycode == null || !keycode)\n            return false;\n        keycode = keycode.toLowerCase();\n        if (keycode === ' ') {\n            keycode = 'space'; // for readability\n        }\n        else if (keycode === '.') {\n            keycode = 'dot'; // because '.' is used as a separator in event names\n        }\n        MODIFIER_KEYS.forEach(modifierName => {\n            if (modifierName !== keycode) {\n                const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n                if (modifierGetter(event)) {\n                    key += modifierName + '.';\n                }\n            }\n        });\n        key += keycode;\n        return key === fullKeyCode;\n    }\n    /**\n     * Configures a handler callback for a key event.\n     * @param fullKey The event name that combines all simultaneous keystrokes.\n     * @param handler The function that responds to the key event.\n     * @param zone The zone in which the event occurred.\n     * @returns A callback function.\n     */\n    static eventCallback(fullKey, handler, zone) {\n        return (event) => {\n            if (KeyEventsPlugin.matchEventFullKeyCode(event, fullKey)) {\n                zone.runGuarded(() => handler(event));\n            }\n        };\n    }\n    /** @internal */\n    static _normalizeKey(keyName) {\n        // TODO: switch to a Map if the mapping grows too much\n        switch (keyName) {\n            case 'esc':\n                return 'escape';\n            default:\n                return keyName;\n        }\n    }\n}\nKeyEventsPlugin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: KeyEventsPlugin, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nKeyEventsPlugin.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: KeyEventsPlugin });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: KeyEventsPlugin, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\nconst NG_DEV_MODE = typeof ngDevMode === 'undefined' || !!ngDevMode;\n/**\n * Bootstraps an instance of an Angular application and renders a standalone component as the\n * application's root component. More information about standalone components can be found in [this\n * guide](guide/standalone-components).\n *\n * @usageNotes\n * The root component passed into this function *must* be a standalone one (should have the\n * `standalone: true` flag in the `@Component` decorator config).\n *\n * ```typescript\n * @Component({\n *   standalone: true,\n *   template: 'Hello world!'\n * })\n * class RootComponent {}\n *\n * const appRef: ApplicationRef = await bootstrapApplication(RootComponent);\n * ```\n *\n * You can add the list of providers that should be available in the application injector by\n * specifying the `providers` field in an object passed as the second argument:\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     {provide: BACKEND_URL, useValue: 'https://yourdomain.com/api'}\n *   ]\n * });\n * ```\n *\n * The `importProvidersFrom` helper method can be used to collect all providers from any\n * existing NgModule (and transitively from all NgModules that it imports):\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(SomeNgModule)\n *   ]\n * });\n * ```\n *\n * Note: the `bootstrapApplication` method doesn't include [Testability](api/core/Testability) by\n * default. You can add [Testability](api/core/Testability) by getting the list of necessary\n * providers using `provideProtractorTestingSupport()` function and adding them into the `providers`\n * array, for example:\n *\n * ```typescript\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, {providers: [provideProtractorTestingSupport()]});\n * ```\n *\n * @param rootComponent A reference to a standalone component that should be rendered.\n * @param options Extra configuration for the bootstrap operation, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nfunction bootstrapApplication(rootComponent, options) {\n    return ɵinternalCreateApplication({ rootComponent, ...createProvidersConfig(options) });\n}\n/**\n * Create an instance of an Angular application without bootstrapping any components. This is useful\n * for the situation where one wants to decouple application environment creation (a platform and\n * associated injectors) from rendering components on a screen. Components can be subsequently\n * bootstrapped on the returned `ApplicationRef`.\n *\n * @param options Extra configuration for the application environment, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nfunction createApplication(options) {\n    return ɵinternalCreateApplication(createProvidersConfig(options));\n}\nfunction createProvidersConfig(options) {\n    return {\n        appProviders: [\n            ...BROWSER_MODULE_PROVIDERS,\n            ...(options?.providers ?? []),\n        ],\n        platformProviders: INTERNAL_BROWSER_PLATFORM_PROVIDERS\n    };\n}\n/**\n * Returns a set of providers required to setup [Testability](api/core/Testability) for an\n * application bootstrapped using the `bootstrapApplication` function. The set of providers is\n * needed to support testing an application with Protractor (which relies on the Testability APIs\n * to be present).\n *\n * @returns An array of providers required to setup Testability for an application and make it\n *     available for testing using Protractor.\n *\n * @publicApi\n */\nfunction provideProtractorTestingSupport() {\n    // Return a copy to prevent changes to the original array in case any in-place\n    // alterations are performed to the `provideProtractorTestingSupport` call results in app code.\n    return [...TESTABILITY_PROVIDERS];\n}\nfunction initDomAdapter() {\n    BrowserDomAdapter.makeCurrent();\n}\nfunction errorHandler() {\n    return new ErrorHandler();\n}\nfunction _document() {\n    // Tell ivy about the global document\n    ɵsetDocument(document);\n    return document;\n}\nconst INTERNAL_BROWSER_PLATFORM_PROVIDERS = [\n    { provide: PLATFORM_ID, useValue: ɵPLATFORM_BROWSER_ID },\n    { provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },\n    { provide: DOCUMENT, useFactory: _document, deps: [] },\n];\n/**\n * A factory function that returns a `PlatformRef` instance associated with browser service\n * providers.\n *\n * @publicApi\n */\nconst platformBrowser = createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n/**\n * Internal marker to signal whether providers from the `BrowserModule` are already present in DI.\n * This is needed to avoid loading `BrowserModule` providers twice. We can't rely on the\n * `BrowserModule` presence itself, since the standalone-based bootstrap just imports\n * `BrowserModule` providers without referencing the module itself.\n */\nconst BROWSER_MODULE_PROVIDERS_MARKER = new InjectionToken(NG_DEV_MODE ? 'BrowserModule Providers Marker' : '');\nconst TESTABILITY_PROVIDERS = [\n    {\n        provide: ɵTESTABILITY_GETTER,\n        useClass: BrowserGetTestability,\n        deps: [],\n    },\n    {\n        provide: ɵTESTABILITY,\n        useClass: Testability,\n        deps: [NgZone, TestabilityRegistry, ɵTESTABILITY_GETTER]\n    },\n    {\n        provide: Testability,\n        useClass: Testability,\n        deps: [NgZone, TestabilityRegistry, ɵTESTABILITY_GETTER]\n    }\n];\nconst BROWSER_MODULE_PROVIDERS = [\n    { provide: ɵINJECTOR_SCOPE, useValue: 'root' },\n    { provide: ErrorHandler, useFactory: errorHandler, deps: [] }, {\n        provide: EVENT_MANAGER_PLUGINS,\n        useClass: DomEventsPlugin,\n        multi: true,\n        deps: [DOCUMENT, NgZone, PLATFORM_ID]\n    },\n    { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT] }, {\n        provide: DomRendererFactory2,\n        useClass: DomRendererFactory2,\n        deps: [EventManager, DomSharedStylesHost, APP_ID, REMOVE_STYLES_ON_COMPONENT_DESTROY]\n    },\n    { provide: RendererFactory2, useExisting: DomRendererFactory2 },\n    { provide: SharedStylesHost, useExisting: DomSharedStylesHost },\n    { provide: DomSharedStylesHost, useClass: DomSharedStylesHost, deps: [DOCUMENT] },\n    { provide: EventManager, useClass: EventManager, deps: [EVENT_MANAGER_PLUGINS, NgZone] },\n    { provide: XhrFactory, useClass: BrowserXhr, deps: [] },\n    NG_DEV_MODE ? { provide: BROWSER_MODULE_PROVIDERS_MARKER, useValue: true } : []\n];\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\nclass BrowserModule {\n    constructor(providersAlreadyPresent) {\n        if (NG_DEV_MODE && providersAlreadyPresent) {\n            throw new Error(`Providers from the \\`BrowserModule\\` have already been loaded. If you need access ` +\n                `to common directives such as NgIf and NgFor, import the \\`CommonModule\\` instead.`);\n        }\n    }\n    /**\n     * Configures a browser-based app to transition from a server-rendered app, if\n     * one is present on the page.\n     *\n     * @param params An object containing an identifier for the app to transition.\n     * The ID must match between the client and server versions of the app.\n     * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n     */\n    static withServerTransition(params) {\n        return {\n            ngModule: BrowserModule,\n            providers: [\n                { provide: APP_ID, useValue: params.appId },\n                { provide: TRANSITION_ID, useExisting: APP_ID },\n                SERVER_TRANSITION_PROVIDERS,\n            ],\n        };\n    }\n}\nBrowserModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: BrowserModule, deps: [{ token: BROWSER_MODULE_PROVIDERS_MARKER, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.NgModule });\nBrowserModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.10\", ngImport: i0, type: BrowserModule, exports: [CommonModule, ApplicationModule] });\nBrowserModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: BrowserModule, providers: [\n        ...BROWSER_MODULE_PROVIDERS,\n        ...TESTABILITY_PROVIDERS\n    ], imports: [CommonModule, ApplicationModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: BrowserModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        ...BROWSER_MODULE_PROVIDERS,\n                        ...TESTABILITY_PROVIDERS\n                    ],\n                    exports: [CommonModule, ApplicationModule],\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [BROWSER_MODULE_PROVIDERS_MARKER]\n                }] }]; } });\n\n/**\n * Factory to create a `Meta` service instance for the current DOM document.\n */\nfunction createMeta() {\n    return new Meta(ɵɵinject(DOCUMENT));\n}\n/**\n * A service for managing HTML `<meta>` tags.\n *\n * Properties of the `MetaDefinition` object match the attributes of the\n * HTML `<meta>` tag. These tags define document metadata that is important for\n * things like configuring a Content Security Policy, defining browser compatibility\n * and security settings, setting HTTP Headers, defining rich content for social sharing,\n * and Search Engine Optimization (SEO).\n *\n * To identify specific `<meta>` tags in a document, use an attribute selection\n * string in the format `\"tag_attribute='value string'\"`.\n * For example, an `attrSelector` value of `\"name='description'\"` matches a tag\n * whose `name` attribute has the value `\"description\"`.\n * Selectors are used with the `querySelector()` Document method,\n * in the format `meta[{attrSelector}]`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)\n *\n *\n * @publicApi\n */\nclass Meta {\n    constructor(_doc) {\n        this._doc = _doc;\n        this._dom = ɵgetDOM();\n    }\n    /**\n     * Retrieves or creates a specific `<meta>` tag element in the current HTML document.\n     * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n     * values in the provided tag definition, and verifies that all other attribute values are equal.\n     * If an existing element is found, it is returned and is not modified in any way.\n     * @param tag The definition of a `<meta>` element to match or create.\n     * @param forceCreation True to create a new element without checking whether one already exists.\n     * @returns The existing element with the same attributes and values if found,\n     * the new element if no match is found, or `null` if the tag parameter is not defined.\n     */\n    addTag(tag, forceCreation = false) {\n        if (!tag)\n            return null;\n        return this._getOrCreateElement(tag, forceCreation);\n    }\n    /**\n     * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.\n     * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n     * values in the provided tag definition, and verifies that all other attribute values are equal.\n     * @param tags An array of tag definitions to match or create.\n     * @param forceCreation True to create new elements without checking whether they already exist.\n     * @returns The matching elements if found, or the new elements.\n     */\n    addTags(tags, forceCreation = false) {\n        if (!tags)\n            return [];\n        return tags.reduce((result, tag) => {\n            if (tag) {\n                result.push(this._getOrCreateElement(tag, forceCreation));\n            }\n            return result;\n        }, []);\n    }\n    /**\n     * Retrieves a `<meta>` tag element in the current HTML document.\n     * @param attrSelector The tag attribute and value to match against, in the format\n     * `\"tag_attribute='value string'\"`.\n     * @returns The matching element, if any.\n     */\n    getTag(attrSelector) {\n        if (!attrSelector)\n            return null;\n        return this._doc.querySelector(`meta[${attrSelector}]`) || null;\n    }\n    /**\n     * Retrieves a set of `<meta>` tag elements in the current HTML document.\n     * @param attrSelector The tag attribute and value to match against, in the format\n     * `\"tag_attribute='value string'\"`.\n     * @returns The matching elements, if any.\n     */\n    getTags(attrSelector) {\n        if (!attrSelector)\n            return [];\n        const list /*NodeList*/ = this._doc.querySelectorAll(`meta[${attrSelector}]`);\n        return list ? [].slice.call(list) : [];\n    }\n    /**\n     * Modifies an existing `<meta>` tag element in the current HTML document.\n     * @param tag The tag description with which to replace the existing tag content.\n     * @param selector A tag attribute and value to match against, to identify\n     * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n     * If not supplied, matches a tag with the same `name` or `property` attribute value as the\n     * replacement tag.\n     * @return The modified element.\n     */\n    updateTag(tag, selector) {\n        if (!tag)\n            return null;\n        selector = selector || this._parseSelector(tag);\n        const meta = this.getTag(selector);\n        if (meta) {\n            return this._setMetaElementAttributes(tag, meta);\n        }\n        return this._getOrCreateElement(tag, true);\n    }\n    /**\n     * Removes an existing `<meta>` tag element from the current HTML document.\n     * @param attrSelector A tag attribute and value to match against, to identify\n     * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n     */\n    removeTag(attrSelector) {\n        this.removeTagElement(this.getTag(attrSelector));\n    }\n    /**\n     * Removes an existing `<meta>` tag element from the current HTML document.\n     * @param meta The tag definition to match against to identify an existing tag.\n     */\n    removeTagElement(meta) {\n        if (meta) {\n            this._dom.remove(meta);\n        }\n    }\n    _getOrCreateElement(meta, forceCreation = false) {\n        if (!forceCreation) {\n            const selector = this._parseSelector(meta);\n            // It's allowed to have multiple elements with the same name so it's not enough to\n            // just check that element with the same name already present on the page. We also need to\n            // check if element has tag attributes\n            const elem = this.getTags(selector).filter(elem => this._containsAttributes(meta, elem))[0];\n            if (elem !== undefined)\n                return elem;\n        }\n        const element = this._dom.createElement('meta');\n        this._setMetaElementAttributes(meta, element);\n        const head = this._doc.getElementsByTagName('head')[0];\n        head.appendChild(element);\n        return element;\n    }\n    _setMetaElementAttributes(tag, el) {\n        Object.keys(tag).forEach((prop) => el.setAttribute(this._getMetaKeyMap(prop), tag[prop]));\n        return el;\n    }\n    _parseSelector(tag) {\n        const attr = tag.name ? 'name' : 'property';\n        return `${attr}=\"${tag[attr]}\"`;\n    }\n    _containsAttributes(tag, elem) {\n        return Object.keys(tag).every((key) => elem.getAttribute(this._getMetaKeyMap(key)) === tag[key]);\n    }\n    _getMetaKeyMap(prop) {\n        return META_KEYS_MAP[prop] || prop;\n    }\n}\nMeta.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: Meta, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nMeta.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: Meta, providedIn: 'root', useFactory: createMeta, deps: [] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: Meta, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root', useFactory: createMeta, deps: [] }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n/**\n * Mapping for MetaDefinition properties with their correct meta attribute names\n */\nconst META_KEYS_MAP = {\n    httpEquiv: 'http-equiv'\n};\n\n/**\n * Factory to create Title service.\n */\nfunction createTitle() {\n    return new Title(ɵɵinject(DOCUMENT));\n}\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\nclass Title {\n    constructor(_doc) {\n        this._doc = _doc;\n    }\n    /**\n     * Get the title of the current HTML document.\n     */\n    getTitle() {\n        return this._doc.title;\n    }\n    /**\n     * Set the title of the current HTML document.\n     * @param newTitle\n     */\n    setTitle(newTitle) {\n        this._doc.title = newTitle || '';\n    }\n}\nTitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: Title, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nTitle.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: Title, providedIn: 'root', useFactory: createTitle, deps: [] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: Title, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root', useFactory: createTitle, deps: [] }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nfunction exportNgVar(name, value) {\n    if (typeof COMPILED === 'undefined' || !COMPILED) {\n        // Note: we can't export `ng` when using closure enhanced optimization as:\n        // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n        // - we can't declare a closure extern as the namespace `ng` is already used within Google\n        //   for typings for angularJS (via `goog.provide('ng....')`).\n        const ng = ɵglobal['ng'] = ɵglobal['ng'] || {};\n        ng[name] = value;\n    }\n}\n\nconst win = typeof window !== 'undefined' && window || {};\n\nclass ChangeDetectionPerfRecord {\n    constructor(msPerTick, numTicks) {\n        this.msPerTick = msPerTick;\n        this.numTicks = numTicks;\n    }\n}\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nclass AngularProfiler {\n    constructor(ref) {\n        this.appRef = ref.injector.get(ApplicationRef);\n    }\n    // tslint:disable:no-console\n    /**\n     * Exercises change detection in a loop and then prints the average amount of\n     * time in milliseconds how long a single round of change detection takes for\n     * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n     * of 500 milliseconds.\n     *\n     * Optionally, a user may pass a `config` parameter containing a map of\n     * options. Supported options are:\n     *\n     * `record` (boolean) - causes the profiler to record a CPU profile while\n     * it exercises the change detector. Example:\n     *\n     * ```\n     * ng.profiler.timeChangeDetection({record: true})\n     * ```\n     */\n    timeChangeDetection(config) {\n        const record = config && config['record'];\n        const profileName = 'Change Detection';\n        // Profiler is not available in Android browsers without dev tools opened\n        const isProfilerAvailable = win.console.profile != null;\n        if (record && isProfilerAvailable) {\n            win.console.profile(profileName);\n        }\n        const start = performanceNow();\n        let numTicks = 0;\n        while (numTicks < 5 || (performanceNow() - start) < 500) {\n            this.appRef.tick();\n            numTicks++;\n        }\n        const end = performanceNow();\n        if (record && isProfilerAvailable) {\n            win.console.profileEnd(profileName);\n        }\n        const msPerTick = (end - start) / numTicks;\n        win.console.log(`ran ${numTicks} change detection cycles`);\n        win.console.log(`${msPerTick.toFixed(2)} ms per check`);\n        return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n    }\n}\nfunction performanceNow() {\n    return win.performance && win.performance.now ? win.performance.now() :\n        new Date().getTime();\n}\n\nconst PROFILER_GLOBAL_NAME = 'profiler';\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * @publicApi\n */\nfunction enableDebugTools(ref) {\n    exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\n    return ref;\n}\n/**\n * Disables Angular tools.\n *\n * @publicApi\n */\nfunction disableDebugTools() {\n    exportNgVar(PROFILER_GLOBAL_NAME, null);\n}\n\nfunction escapeHtml(text) {\n    const escapedText = {\n        '&': '&a;',\n        '\"': '&q;',\n        '\\'': '&s;',\n        '<': '&l;',\n        '>': '&g;',\n    };\n    return text.replace(/[&\"'<>]/g, s => escapedText[s]);\n}\nfunction unescapeHtml(text) {\n    const unescapedText = {\n        '&a;': '&',\n        '&q;': '\"',\n        '&s;': '\\'',\n        '&l;': '<',\n        '&g;': '>',\n    };\n    return text.replace(/&[^;]+;/g, s => unescapedText[s]);\n}\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n */\nfunction makeStateKey(key) {\n    return key;\n}\n/**\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * The `TransferState` is available as an injectable token.\n * On the client, just inject this token using DI and use it, it will be lazily initialized.\n * On the server it's already included if `renderApplication` function is used. Otherwise, import\n * the `ServerTransferStateModule` module to make the `TransferState` available.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialized in a\n * non-lossy manner.\n *\n * @publicApi\n */\nclass TransferState {\n    constructor() {\n        this.store = {};\n        this.onSerializeCallbacks = {};\n        this.store = retrieveTransferredState(inject(DOCUMENT), inject(APP_ID));\n    }\n    /**\n     * Get the value corresponding to a key. Return `defaultValue` if key is not found.\n     */\n    get(key, defaultValue) {\n        return this.store[key] !== undefined ? this.store[key] : defaultValue;\n    }\n    /**\n     * Set the value corresponding to a key.\n     */\n    set(key, value) {\n        this.store[key] = value;\n    }\n    /**\n     * Remove a key from the store.\n     */\n    remove(key) {\n        delete this.store[key];\n    }\n    /**\n     * Test whether a key exists in the store.\n     */\n    hasKey(key) {\n        return this.store.hasOwnProperty(key);\n    }\n    /**\n     * Indicates whether the state is empty.\n     */\n    get isEmpty() {\n        return Object.keys(this.store).length === 0;\n    }\n    /**\n     * Register a callback to provide the value for a key when `toJson` is called.\n     */\n    onSerialize(key, callback) {\n        this.onSerializeCallbacks[key] = callback;\n    }\n    /**\n     * Serialize the current state of the store to JSON.\n     */\n    toJson() {\n        // Call the onSerialize callbacks and put those values into the store.\n        for (const key in this.onSerializeCallbacks) {\n            if (this.onSerializeCallbacks.hasOwnProperty(key)) {\n                try {\n                    this.store[key] = this.onSerializeCallbacks[key]();\n                }\n                catch (e) {\n                    console.warn('Exception in onSerialize callback: ', e);\n                }\n            }\n        }\n        return JSON.stringify(this.store);\n    }\n}\nTransferState.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: TransferState, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nTransferState.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: TransferState, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: TransferState, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return []; } });\nfunction retrieveTransferredState(doc, appId) {\n    // Locate the script tag with the JSON data transferred from the server.\n    // The id of the script tag is set to the Angular appId + 'state'.\n    const script = doc.getElementById(appId + '-state');\n    let initialState = {};\n    if (script && script.textContent) {\n        try {\n            // Avoid using any here as it triggers lint errors in google3 (any is not allowed).\n            initialState = JSON.parse(unescapeHtml(script.textContent));\n        }\n        catch (e) {\n            console.warn('Exception while restoring TransferState for app ' + appId, e);\n        }\n    }\n    return initialState;\n}\n/**\n * NgModule to install on the client side while using the `TransferState` to transfer state from\n * server to client.\n *\n * @publicApi\n * @deprecated no longer needed, you can inject the `TransferState` in an app without providing\n *     this module.\n */\nclass BrowserTransferStateModule {\n}\nBrowserTransferStateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: BrowserTransferStateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBrowserTransferStateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.10\", ngImport: i0, type: BrowserTransferStateModule });\nBrowserTransferStateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: BrowserTransferStateModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: BrowserTransferStateModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @publicApi\n */\nclass By {\n    /**\n     * Match all nodes.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n     */\n    static all() {\n        return () => true;\n    }\n    /**\n     * Match elements by the given CSS selector.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n     */\n    static css(selector) {\n        return (debugElement) => {\n            return debugElement.nativeElement != null ?\n                elementMatches(debugElement.nativeElement, selector) :\n                false;\n        };\n    }\n    /**\n     * Match nodes that have the given directive present.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n     */\n    static directive(type) {\n        return (debugNode) => debugNode.providerTokens.indexOf(type) !== -1;\n    }\n}\nfunction elementMatches(n, selector) {\n    if (ɵgetDOM().isElementNode(n)) {\n        return n.matches && n.matches(selector) ||\n            n.msMatchesSelector && n.msMatchesSelector(selector) ||\n            n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n    }\n    return false;\n}\n\n/**\n * Supported HammerJS recognizer event names.\n */\nconst EVENT_NAMES = {\n    // pan\n    'pan': true,\n    'panstart': true,\n    'panmove': true,\n    'panend': true,\n    'pancancel': true,\n    'panleft': true,\n    'panright': true,\n    'panup': true,\n    'pandown': true,\n    // pinch\n    'pinch': true,\n    'pinchstart': true,\n    'pinchmove': true,\n    'pinchend': true,\n    'pinchcancel': true,\n    'pinchin': true,\n    'pinchout': true,\n    // press\n    'press': true,\n    'pressup': true,\n    // rotate\n    'rotate': true,\n    'rotatestart': true,\n    'rotatemove': true,\n    'rotateend': true,\n    'rotatecancel': true,\n    // swipe\n    'swipe': true,\n    'swipeleft': true,\n    'swiperight': true,\n    'swipeup': true,\n    'swipedown': true,\n    // tap\n    'tap': true,\n    'doubletap': true\n};\n/**\n * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.\n * @see `HammerGestureConfig`\n *\n * @ngModule HammerModule\n * @publicApi\n */\nconst HAMMER_GESTURE_CONFIG = new InjectionToken('HammerGestureConfig');\n/**\n * Injection token used to provide a {@link HammerLoader} to Angular.\n *\n * @publicApi\n */\nconst HAMMER_LOADER = new InjectionToken('HammerLoader');\n/**\n * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\nclass HammerGestureConfig {\n    constructor() {\n        /**\n         * A set of supported event names for gestures to be used in Angular.\n         * Angular supports all built-in recognizers, as listed in\n         * [HammerJS documentation](https://hammerjs.github.io/).\n         */\n        this.events = [];\n        /**\n         * Maps gesture event names to a set of configuration options\n         * that specify overrides to the default values for specific properties.\n         *\n         * The key is a supported event name to be configured,\n         * and the options object contains a set of properties, with override values\n         * to be applied to the named recognizer event.\n         * For example, to disable recognition of the rotate event, specify\n         *  `{\"rotate\": {\"enable\": false}}`.\n         *\n         * Properties that are not present take the HammerJS default values.\n         * For information about which properties are supported for which events,\n         * and their allowed and default values, see\n         * [HammerJS documentation](https://hammerjs.github.io/).\n         *\n         */\n        this.overrides = {};\n    }\n    /**\n     * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n     * and attaches it to a given HTML element.\n     * @param element The element that will recognize gestures.\n     * @returns A HammerJS event-manager object.\n     */\n    buildHammer(element) {\n        const mc = new Hammer(element, this.options);\n        mc.get('pinch').set({ enable: true });\n        mc.get('rotate').set({ enable: true });\n        for (const eventName in this.overrides) {\n            mc.get(eventName).set(this.overrides[eventName]);\n        }\n        return mc;\n    }\n}\nHammerGestureConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HammerGestureConfig, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nHammerGestureConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HammerGestureConfig });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HammerGestureConfig, decorators: [{\n            type: Injectable\n        }] });\n/**\n * Event plugin that adds Hammer support to an application.\n *\n * @ngModule HammerModule\n */\nclass HammerGesturesPlugin extends EventManagerPlugin {\n    constructor(doc, _config, console, loader) {\n        super(doc);\n        this._config = _config;\n        this.console = console;\n        this.loader = loader;\n        this._loaderPromise = null;\n    }\n    supports(eventName) {\n        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n            return false;\n        }\n        if (!window.Hammer && !this.loader) {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                this.console.warn(`The \"${eventName}\" event cannot be bound because Hammer.JS is not ` +\n                    `loaded and no custom loader has been specified.`);\n            }\n            return false;\n        }\n        return true;\n    }\n    addEventListener(element, eventName, handler) {\n        const zone = this.manager.getZone();\n        eventName = eventName.toLowerCase();\n        // If Hammer is not present but a loader is specified, we defer adding the event listener\n        // until Hammer is loaded.\n        if (!window.Hammer && this.loader) {\n            this._loaderPromise = this._loaderPromise || zone.runOutsideAngular(() => this.loader());\n            // This `addEventListener` method returns a function to remove the added listener.\n            // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n            // than remove anything.\n            let cancelRegistration = false;\n            let deregister = () => {\n                cancelRegistration = true;\n            };\n            zone.runOutsideAngular(() => this._loaderPromise\n                .then(() => {\n                // If Hammer isn't actually loaded when the custom loader resolves, give up.\n                if (!window.Hammer) {\n                    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                        this.console.warn(`The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n                    }\n                    deregister = () => { };\n                    return;\n                }\n                if (!cancelRegistration) {\n                    // Now that Hammer is loaded and the listener is being loaded for real,\n                    // the deregistration function changes from canceling registration to\n                    // removal.\n                    deregister = this.addEventListener(element, eventName, handler);\n                }\n            })\n                .catch(() => {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    this.console.warn(`The \"${eventName}\" event cannot be bound because the custom ` +\n                        `Hammer.JS loader failed.`);\n                }\n                deregister = () => { };\n            }));\n            // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n            // can change the behavior of `deregister` once the listener is added. Using a closure in\n            // this way allows us to avoid any additional data structures to track listener removal.\n            return () => {\n                deregister();\n            };\n        }\n        return zone.runOutsideAngular(() => {\n            // Creating the manager bind events, must be done outside of angular\n            const mc = this._config.buildHammer(element);\n            const callback = function (eventObj) {\n                zone.runGuarded(function () {\n                    handler(eventObj);\n                });\n            };\n            mc.on(eventName, callback);\n            return () => {\n                mc.off(eventName, callback);\n                // destroy mc to prevent memory leak\n                if (typeof mc.destroy === 'function') {\n                    mc.destroy();\n                }\n            };\n        });\n    }\n    isCustomEvent(eventName) {\n        return this._config.events.indexOf(eventName) > -1;\n    }\n}\nHammerGesturesPlugin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HammerGesturesPlugin, deps: [{ token: DOCUMENT }, { token: HAMMER_GESTURE_CONFIG }, { token: i0.ɵConsole }, { token: HAMMER_LOADER, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nHammerGesturesPlugin.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HammerGesturesPlugin });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HammerGesturesPlugin, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: HammerGestureConfig, decorators: [{\n                    type: Inject,\n                    args: [HAMMER_GESTURE_CONFIG]\n                }] }, { type: i0.ɵConsole }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [HAMMER_LOADER]\n                }] }]; } });\n/**\n * Adds support for HammerJS.\n *\n * Import this module at the root of your application so that Angular can work with\n * HammerJS to detect gesture events.\n *\n * Note that applications still need to include the HammerJS script itself. This module\n * simply sets up the coordination layer between HammerJS and Angular's EventManager.\n *\n * @publicApi\n */\nclass HammerModule {\n}\nHammerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HammerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHammerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.10\", ngImport: i0, type: HammerModule });\nHammerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HammerModule, providers: [\n        {\n            provide: EVENT_MANAGER_PLUGINS,\n            useClass: HammerGesturesPlugin,\n            multi: true,\n            deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, ɵConsole, [new Optional(), HAMMER_LOADER]]\n        },\n        { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: [] },\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: HammerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        {\n                            provide: EVENT_MANAGER_PLUGINS,\n                            useClass: HammerGesturesPlugin,\n                            multi: true,\n                            deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, ɵConsole, [new Optional(), HAMMER_LOADER]]\n                        },\n                        { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: [] },\n                    ]\n                }]\n        }] });\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\nclass DomSanitizer {\n}\nDomSanitizer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: DomSanitizer, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nDomSanitizer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: DomSanitizer, providedIn: 'root', useExisting: i0.forwardRef(function () { return DomSanitizerImpl; }) });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: DomSanitizer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root', useExisting: forwardRef(() => DomSanitizerImpl) }]\n        }] });\nfunction domSanitizerImplFactory(injector) {\n    return new DomSanitizerImpl(injector.get(DOCUMENT));\n}\nclass DomSanitizerImpl extends DomSanitizer {\n    constructor(_doc) {\n        super();\n        this._doc = _doc;\n    }\n    sanitize(ctx, value) {\n        if (value == null)\n            return null;\n        switch (ctx) {\n            case SecurityContext.NONE:\n                return value;\n            case SecurityContext.HTML:\n                if (ɵallowSanitizationBypassAndThrow(value, \"HTML\" /* BypassType.Html */)) {\n                    return ɵunwrapSafeValue(value);\n                }\n                return ɵ_sanitizeHtml(this._doc, String(value)).toString();\n            case SecurityContext.STYLE:\n                if (ɵallowSanitizationBypassAndThrow(value, \"Style\" /* BypassType.Style */)) {\n                    return ɵunwrapSafeValue(value);\n                }\n                return value;\n            case SecurityContext.SCRIPT:\n                if (ɵallowSanitizationBypassAndThrow(value, \"Script\" /* BypassType.Script */)) {\n                    return ɵunwrapSafeValue(value);\n                }\n                throw new Error('unsafe value used in a script context');\n            case SecurityContext.URL:\n                if (ɵallowSanitizationBypassAndThrow(value, \"URL\" /* BypassType.Url */)) {\n                    return ɵunwrapSafeValue(value);\n                }\n                return ɵ_sanitizeUrl(String(value));\n            case SecurityContext.RESOURCE_URL:\n                if (ɵallowSanitizationBypassAndThrow(value, \"ResourceURL\" /* BypassType.ResourceUrl */)) {\n                    return ɵunwrapSafeValue(value);\n                }\n                throw new Error(`unsafe value used in a resource URL context (see ${ɵXSS_SECURITY_URL})`);\n            default:\n                throw new Error(`Unexpected SecurityContext ${ctx} (see ${ɵXSS_SECURITY_URL})`);\n        }\n    }\n    bypassSecurityTrustHtml(value) {\n        return ɵbypassSanitizationTrustHtml(value);\n    }\n    bypassSecurityTrustStyle(value) {\n        return ɵbypassSanitizationTrustStyle(value);\n    }\n    bypassSecurityTrustScript(value) {\n        return ɵbypassSanitizationTrustScript(value);\n    }\n    bypassSecurityTrustUrl(value) {\n        return ɵbypassSanitizationTrustUrl(value);\n    }\n    bypassSecurityTrustResourceUrl(value) {\n        return ɵbypassSanitizationTrustResourceUrl(value);\n    }\n}\nDomSanitizerImpl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: DomSanitizerImpl, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nDomSanitizerImpl.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: DomSanitizerImpl, providedIn: 'root', useFactory: domSanitizerImplFactory, deps: [{ token: Injector }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.10\", ngImport: i0, type: DomSanitizerImpl, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root', useFactory: domSanitizerImplFactory, deps: [Injector] }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser package.\n */\n/**\n * @publicApi\n */\nconst VERSION = new Version('15.2.10');\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserModule, BrowserTransferStateModule, By, DomSanitizer, EVENT_MANAGER_PLUGINS, EventManager, HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerModule, Meta, REMOVE_STYLES_ON_COMPONENT_DESTROY, Title, TransferState, VERSION, bootstrapApplication, createApplication, disableDebugTools, enableDebugTools, makeStateKey, platformBrowser, provideProtractorTestingSupport, BrowserDomAdapter as ɵBrowserDomAdapter, BrowserGetTestability as ɵBrowserGetTestability, DomEventsPlugin as ɵDomEventsPlugin, DomRendererFactory2 as ɵDomRendererFactory2, DomSanitizerImpl as ɵDomSanitizerImpl, DomSharedStylesHost as ɵDomSharedStylesHost, HammerGesturesPlugin as ɵHammerGesturesPlugin, INTERNAL_BROWSER_PLATFORM_PROVIDERS as ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS, KeyEventsPlugin as ɵKeyEventsPlugin, NAMESPACE_URIS as ɵNAMESPACE_URIS, SharedStylesHost as ɵSharedStylesHost, TRANSITION_ID as ɵTRANSITION_ID, escapeHtml as ɵescapeHtml, flattenStyles as ɵflattenStyles, initDomAdapter as ɵinitDomAdapter, shimContentAttribute as ɵshimContentAttribute, shimHostAttribute as ɵshimHostAttribute };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}